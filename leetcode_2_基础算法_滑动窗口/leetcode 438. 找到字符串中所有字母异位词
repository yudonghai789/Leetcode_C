/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : leetcode 438. 找到字符串中所有字母异位词   https://leetcode.cn/problems/find-all-anagrams-in-a-string/
 * 作    者   :
 * 生成日期   :
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"



/*
438. 找到字符串中所有字母异位词
给定两个字符串 s 和 p，找到 s 中所有 p 的 异位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。

异位词 指由相同字母重排列形成的字符串（包括相同的字符串）。

 

示例 1:

输入: s = "cbaebabacd", p = "abc"
输出: [0,6]
解释:
起始索引等于 0 的子串是 "cba", 它是 "abc" 的异位词。
起始索引等于 6 的子串是 "bac", 它是 "abc" 的异位词。
 示例 2:

输入: s = "abab", p = "ab"
输出: [0,1,2]
解释:
起始索引等于 0 的子串是 "ab", 它是 "ab" 的异位词。
起始索引等于 1 的子串是 "ba", 它是 "ab" 的异位词。
起始索引等于 2 的子串是 "ab", 它是 "ab" 的异位词。
 

提示:

1 <= s.length, p.length <= 3 * 104
s 和 p 仅包含小写字母

*/




// ---------------------------解法 开始--------滑动窗口-----Bit运算--------------------------------------
#ifndef BIT_CLR
#define BIT_CLR(data, pos) ((data) &= ~(unsigned int)(0x1U << (pos)))
#endif

#ifndef BIT_TST
#define BIT_TST(data, pos) (((data) >> (pos)) & 0x1U)
#endif

#ifndef BIT_SET
#define BIT_SET(data, pos) ((data) |= (0x1U << (pos)))
#endif

// 翻转bit
#ifndef BIT_RVS
#define BIT_RVS(data, pos) ((data) ^= (0x1U << (pos)))
#endif

// #ifndef BIT_CNT
// #define BIT_CNT(data)                                 \
//     do {                                              \
//         int cnt = 0;                                  \
//         for (int i = 0; i < 32; i++) {                \
//             if (((data >> i) & 1) == 1) {             \
//                 cnt++;                                \
//             }                                         \
//         }                                             \
//         return cnt;                                   \
//     } while (0)
// #endif

int BitCnt(int Bitmap) {
    int cnt = 0;
    for (int i = 0; i < 32; i++) {
        if (((Bitmap >> i) & 1) == 1) {
            cnt++;
        }
    }
    return cnt;
}




int* findAnagrams(char * s, char * p, int* returnSize)
{
    int pLen = strlen(p);
    int sLen = strlen(s);

    *returnSize = 0;
    int *res = (int *)malloc(sizeof(int) * sLen);
    memset(res, 0, sizeof(int) * sLen);
    int resLen = 0;

    if (pLen > sLen) {
        return res;
    }

    int pCnt[26] = { 0 };
    for (int i = 0; i < pLen; i++) {
        pCnt[p[i] - 'a']++;
    }

    int sCnt[26] = { 0 };
    for (int i = 0; i < pLen; i++) {
        sCnt[(s[i] - 'a')]++;
    }

    unsigned int bitCompare = 0;
    for (int i = 0; i < 26; i++) {
        if (pCnt[i] != sCnt[i]) {
            BIT_SET(bitCompare, i);
        }
    }
    if (bitCompare == 0) {
        res[resLen++] = 0;
    }


    for (int right = pLen; right < sLen; right++) {
        int left = right - pLen; // right进窗口， left出窗口
        int addIdx = s[right] - 'a';
        int reduIdx = s[left] - 'a';
        sCnt[addIdx]++;
        sCnt[reduIdx]--;

        if (pCnt[addIdx] != sCnt[addIdx]) {
            BIT_SET(bitCompare, addIdx);
        } else {
            BIT_CLR(bitCompare, addIdx);
        }

        if (pCnt[reduIdx] != sCnt[reduIdx]) {
            BIT_SET(bitCompare, reduIdx);
        } else {
            BIT_CLR(bitCompare, reduIdx);
        }

        if (bitCompare == 0) {
            res[resLen++] = left + 1; 
        }
    }

    *returnSize = resLen;
    return res;
}
// ---------------------------解法 结束-------------------------------------------------------





int main(void)
{
    int bun = 5;
    int a = BitCnt(bun);

    return 0;
}
