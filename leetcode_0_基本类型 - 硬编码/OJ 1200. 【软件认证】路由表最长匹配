/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : OJ 1200. 【软件认证】路由表最长匹配. https://oj.rnd.huawei.com/problems/1200/details
 * 作    者   :
 * 生成日期   :

 * 
      --- 
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <limits.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
#include "securec.h"
// #include "vos_priorityqueue.h"





/*
*/




// ---------------------------解法 开始---带权值有向图的 非负权有向图的单源最短路径问题-----------------------------------------------------

#define MAX_N 10001
#define BUF_LEN 32

typedef struct IpInfo {
    int ipIndex;
    char ipChar[BUF_LEN];

    char ip[4][BUF_LEN];
    int ipVal[4];
    unsigned long long ipinterger;

    bool bit[BUF_LEN];
    int m;
} IpInfo;

IpInfo g_table[MAX_N];

void IpTableSplite(char **ipTable, int ipTableCnt)
{
    memset_s(g_table, sizeof(g_table), 0, sizeof(g_table));
    int tableIndex = 0;
    for (int i = 0; i < ipTableCnt; i++) {
        g_table[tableIndex].ipIndex = tableIndex;
        strcpy_s(g_table[tableIndex].ipChar, sizeof(g_table[tableIndex].ipChar), ipTable[i]);
        int len = strlen(ipTable[i]);
        int ipSec = 0;
        int secIndex = 0;
        for (int j = 0; j < len; j++) {
            if (ipTable[i][j] == '/') {
                char mask[10] = { 0 };
                strcpy(mask, &ipTable[i][j + 1]);
                g_table[tableIndex].m = atoi(mask);
                break;
            }

            if (ipTable[i][j] == '.') {
                ipSec++;
                secIndex = 0;
                continue;
            }
            g_table[tableIndex].ip[ipSec][secIndex++] = ipTable[i][j];
        }

        for (int sec = 0; sec < 4; sec++) {
            int ipIntVal = atoi(g_table[tableIndex].ip[sec]);
            g_table[tableIndex].ipVal[sec] = ipIntVal;
            int end = sec * 8;
            int start = sec * 8 + 7;
            
            g_table[tableIndex].bit[start--] = ipIntVal % 2;
            while (ipIntVal / 2 != 0) {
                ipIntVal = ipIntVal / 2;
                g_table[tableIndex].bit[start--] = ipIntVal % 2;
            }
        }
        g_table[tableIndex].ipinterger = (unsigned long long)g_table[tableIndex].ipVal[0] * 0b100000000000000000000000 +
                                         (unsigned long long)g_table[tableIndex].ipVal[1] * 0b1000000000000000 +
                                         (unsigned long long)g_table[tableIndex].ipVal[2] * 0b10000000 +
                                         (unsigned long long)g_table[tableIndex].ipVal[3];

        // g_table[tableIndex].ipinterger = (unsigned long long)g_table[tableIndex].ipVal[0] * 1000000000 +
        //                                  (unsigned long long)g_table[tableIndex].ipVal[1] * 1000000 +
        //                                  (unsigned long long)g_table[tableIndex].ipVal[2] * 1000 +
        //                                  (unsigned long long)g_table[tableIndex].ipVal[3];

        tableIndex++;
    }
}


int CompareStruct(const void *a, const void *b)
{
    IpInfo *structA = (IpInfo *)a;
    IpInfo *structB = (IpInfo *)b;

    return (structB->m - structA->m != 0)?
            structB->m - structA->m :
                structA->ipIndex - structB->ipIndex;
}


// 待实现函数，请在此填入答题代码。
// 生成的信息存于outBuf中，maxOutBufLen是最大数组长度。
static void RouterSearch(char *dstIp, char **ipTable, int ipTableCnt, char* outBuf, int maxOutBufLen)
{
    ipTable[ipTableCnt++] = dstIp; // 目的IP就在最后一个
    IpTableSplite(ipTable, ipTableCnt);
    IpInfo dst = g_table[--ipTableCnt];
    // g_table[ipTableCnt] = { 0, { 0 }, { 0 }, { 0 }, 0 };

    memset_s(outBuf, sizeof(char) * maxOutBufLen, 0, sizeof(char) * maxOutBufLen);
    int resLen = 0;

    qsort(g_table, ipTableCnt, sizeof(IpInfo), CompareStruct);
    int currMaxBit = g_table[0].m;
    bool maxLock = false;
    for (int i = 0; i < ipTableCnt; i++) {
        // if (maxLock == true && g_table[i].m < currMaxBit) {
        //     break;
        // }
        unsigned long long v = pow(2, 32 - g_table[i].m);
        if ((unsigned long long)dst.ipinterger / v == (unsigned long long)g_table[i].ipinterger / v) {
            maxLock = true;
            strcpy_s(outBuf, sizeof(char) * maxOutBufLen, g_table[i].ipChar);
            return;
        }
    }
    
    if (maxLock == false) {
         strcpy_s(outBuf, sizeof(char) * maxOutBufLen, "empty");
    }
}

int main(void)
{
    static char dstIp[BUF_LEN];
    if (gets_s(dstIp, sizeof(dstIp)) == NULL) { return -1; }

    int n;
    if (scanf_s("%d\n", &n) != 1) { return -1; }

    static char ipTableBuf[MAX_N][BUF_LEN];
    static char *ipTable[MAX_N];
    for (int i = 0; i < n; i++) {
        if (gets_s(ipTableBuf[i], sizeof(ipTableBuf[i])) == NULL) { return -1; }
        ipTable[i] = ipTableBuf[i];
    }

    char outBuf[BUF_LEN] = { 0 };
    RouterSearch(dstIp, ipTable, n, outBuf, BUF_LEN);
    (void)printf("%s", outBuf);
    return 0;
}

// ---------------------------解法 结束---------------------------------------------------------------------

