/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : OJ 1810. 【软件认证】日志敏感信息屏蔽. https://oj.rnd.huawei.com/problems/1810/details
 * 作    者   :
 * 生成日期   :

 * 
      --- 
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <limits.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
#include "securec.h"
#include "vos_priorityqueue.h"
#include "vos_list.h"





/*


*/




// ---------------------------解法 ----------------------------------------------------------------

#define MAXN 50
#define KEY_BUF_LEN 16
#define LOG_BUF_LEN 256

typedef enum RuleId {
    RULE1 = 1,
    RULE2 = 2,
    RULE3 = 3,
} RuleId;

void StringToLower(char *inString, int len, char *outString)
{
    for (int i = 0; i < len; i++) {
        outString[i] = (inString[i] >= 'A' && inString[i] <= 'Z') ? inString[i] - 'A' + 'a' : inString[i];
    }
}

typedef struct UthshCharArray {
    char key[KEY_BUF_LEN];
    int ruleId;  // 这道题其实也可以不需要Value
    UT_hash_handle hh;
} UthshCharArray;

UthshCharArray* UthshFindByKey(UthshCharArray **UthshHead, char ikey[KEY_BUF_LEN])
{
    char changeToLow[KEY_BUF_LEN] = { 0 };
    StringToLower(ikey, strlen(ikey), changeToLow);

    UthshCharArray *temp = NULL;
    HASH_FIND_STR(*UthshHead, changeToLow, temp);
    return temp;
}

UthshCharArray* UthshAddByKey(UthshCharArray **UthshHead, char ikey[KEY_BUF_LEN], RuleId value)
{
    UthshCharArray *temp = UthshFindByKey(UthshHead, ikey);
    if (temp == NULL) {
        temp = (UthshCharArray *)malloc(sizeof(UthshCharArray));
        memset(temp, 0, sizeof(UthshCharArray));
        char changeToLow[KEY_BUF_LEN] = { 0 };
        StringToLower(ikey, strlen(ikey), changeToLow);
        strcpy(temp->key, changeToLow);
        temp->ruleId = value;
        HASH_ADD_STR(*UthshHead, key, temp);
        return temp;
    } else {
        return temp;
    }
}
void TuhashDeleteAll(UthshCharArray** hashtableHead) {
   UthshCharArray *current_user, *tmp;

   HASH_ITER(hh, *hashtableHead, current_user, tmp) {
       HASH_DEL(*hashtableHead, current_user);  /* delete it (users advances to next) */
       free(current_user);             /* free it */
   }
}

void TuhashFindAll(UthshCharArray** hashtableHead) {
   UthshCharArray *current_user, *tmp;
   HASH_ITER(hh, *hashtableHead, current_user, tmp) {
       printf("key = %s  ->  value = %d \n", current_user->key, current_user->ruleId);
   }
   printf("\n");
}

typedef struct InputInfo {
    char key[KEY_BUF_LEN];
    char string[LOG_BUF_LEN];
} InputInfo;

int SpliateString(char *input, InputInfo inputString[LOG_BUF_LEN])
{
    int inputLen = 0;
    int inputSec = 0;
    int inputSecindex = 0;
    for (int i = 0; i < strlen(input); i++) {
        if (input[i] == ':') {
            inputSec = 1;
            inputSecindex = 0;
        } else if (input[i] == ',') {
            inputLen++;
            inputSec = 0;
            inputSecindex = 0;
        } else {
            if (inputSec == 0) {
                inputString[inputLen].key[inputSecindex++] = input[i];
            } else {
                inputString[inputLen].string[inputSecindex++] = input[i];
            }
        }
    }

    return inputLen + 1;
}

void EncodeString(UthshCharArray *UthshHead, InputInfo* inputString, int inputLen, char *outBuf, int outBufLen)
{
    memset_s(outBuf, sizeof(char) * outBufLen, 0, sizeof(char) * outBufLen);
    int resLen = 0;
    for (int i = 0; i < inputLen; i++) {
        UthshCharArray *temp = UthshFindByKey(&UthshHead, inputString[i].key);
        if (temp == NULL) {
            resLen += sprintf_s(outBuf + resLen, outBufLen - resLen, "%s:%s,", inputString[i].key, inputString[i].string);
        } else {
            if (temp->ruleId == 1) {
                resLen += sprintf_s(outBuf + resLen, outBufLen - resLen, "%s:******,", inputString[i].key);
            } else if (temp->ruleId == 2) {
                resLen += sprintf_s(outBuf + resLen, outBufLen - resLen, "%s:", inputString[i].key);
                int matchCnt = 0;
                for (int ruleCode2 = 0; ruleCode2 < strlen(inputString[i].string); ruleCode2++) {
                    if (inputString[i].string[ruleCode2] == '.') {
                        matchCnt++;
                    }
                    if (matchCnt == 0 || matchCnt == 4) {
                        resLen += sprintf_s(outBuf + resLen, outBufLen - resLen, "%c", inputString[i].string[ruleCode2]);
                    } else if (matchCnt == 3) {
                        resLen += sprintf_s(outBuf + resLen, outBufLen - resLen, ".***.***%c", inputString[i].string[ruleCode2]);
                        matchCnt++;
                    }
                }
                resLen += sprintf_s(outBuf + resLen, outBufLen - resLen, ",");
            } else {
                resLen += sprintf_s(outBuf + resLen, outBufLen - resLen, "%s:", inputString[i].key);
                int endChar = strlen(inputString[i].string);
                int numCnt = 0;
                int endCnt = endChar;
                int startCnt = 0;
                for (int ruleCode3 = endChar - 1; ruleCode3 >= 0; ruleCode3--) {
                    if (inputString[i].string[ruleCode3] >= '0' && inputString[i].string[ruleCode3] <= '9') {
                        numCnt++;
                    } else {
                        if (numCnt >= 4) {
                            startCnt = ruleCode3;
                            break;
                        }
                        endCnt = ruleCode3;
                        numCnt = 0;
                    }
                }
                
                int chageend = endCnt - (numCnt / 4 + 1);
                int changesrt = chageend + 1 - numCnt / 2;
                for (int ruleCode3 = 0; ruleCode3 < endChar; ruleCode3++) {
                    if (ruleCode3 >= changesrt && ruleCode3 <= chageend && numCnt >= 4) {
                        resLen += sprintf_s(outBuf + resLen, outBufLen - resLen, "*");
                    } else {
                        resLen += sprintf_s(outBuf + resLen, outBufLen - resLen, "%c", inputString[i].string[ruleCode3]);
                    }
                }
                resLen += sprintf_s(outBuf + resLen, outBufLen - resLen, ",");
            }
        }
    }
    outBuf[resLen - 1] = 0;
}

void LogAnonymize(char *keys[], int keyCnt, char *input, char *outBuf, int outBufLen)
{
    UthshCharArray *UthshHead = NULL;
    char pas[KEY_BUF_LEN] = "password";
    char pwd[KEY_BUF_LEN] = "pwd";
    UthshAddByKey(&UthshHead, pas, RULE1);
    UthshAddByKey(&UthshHead, pwd, RULE1);
    for (int i = 0; i < keyCnt; i++) {
        int endChar = strlen(keys[i]) - 1;
        RuleId rel = RULE3;
        if ((keys[i][endChar - 1] == 'i' || keys[i][endChar - 1] == 'I') &&
            (keys[i][endChar] == 'p' || keys[i][endChar] == 'P')) {
            rel = RULE2;
        }
        UthshAddByKey(&UthshHead, keys[i], rel);
    }

    InputInfo inputString[LOG_BUF_LEN] = { 0 };
    int inputLen = SpliateString(input, inputString);

    EncodeString(UthshHead, inputString, inputLen, outBuf, outBufLen);
}

/* 代码仅供参考，注意避免圈复杂度过大 */
int main(void)
{
    int n;
    if (scanf_s("%d", &n) != 1) { return -1; }

    static char keysBuf[MAXN][KEY_BUF_LEN];
    static char *keys[MAXN];
    int i;
    for (i = 0; i < n; i++) {
        if (scanf_s("%s", keysBuf[i], KEY_BUF_LEN) != 1) { return -1; }
        keys[i] = keysBuf[i];
    }

    static char buf[LOG_BUF_LEN];
    if (scanf_s("%s", buf, LOG_BUF_LEN) != 1) { return -1; }

    static char outBuf[LOG_BUF_LEN];
    LogAnonymize(keys, n, buf, outBuf, sizeof(outBuf));

    (void)printf("%s", outBuf);
    return 0;
}

// ---------------------------解法 结束---------------------------------------------------------------------
