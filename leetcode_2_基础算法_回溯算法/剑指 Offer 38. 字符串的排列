/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : 剑指 Offer 38. 字符串的排列   https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/
 * 作    者   :
 * 生成日期   :

 *  
      --- 
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"





/*
剑指 Offer 38. 字符串的排列
输入一个字符串，打印出该字符串中字符的所有排列。

 

你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。

 

示例:

输入：s = "abc"
输出：["abc","acb","bac","bca","cab","cba"]
 

限制：

1 <= s 的长度 <= 8
*/





// ---------------------------解法 开始-----暴力遍历: -----------------------------------------------------

// ---------------------------解法 结束---------------------------------------------------------------------







// ---------------------------解法 开始-----BFS 递归模板: -----------------------------------------------------

// ---------------------------解法 结束---------------------------------------------------------------------











// ---------------------------解法 开始-----BFS 迭代模板: -----------------------------------------------------

// ---------------------------解法 结束-----------------------------------------------------------------------










// ---------------------------解法 开始-----DFS 递归模板: ---------------------------------------------------

// ---------------------------解法 结束-----------------------------------------------------------------------------------











// ---------------------------解法 开始-----DFS 迭代模板: --------------------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------










// ---------------------------解法 开始-----回溯 迭代模板: ---------有重复元素，答案不能包含重复结果的全排列问题-----------------------------------------
#define MAX_ROW_LEN 10

#define MAX_RES_LEN 8 * 7 * 6 * 5 * 4 *3 * 2

bool g_visit[MAX_ROW_LEN];

typedef enum Status {
    INIT = 0,
    REMOVE = INIT,
    USING = 0x5a5a
} Status;

typedef struct TracePointer {
    Status visit[MAX_ROW_LEN];
    char item[MAX_ROW_LEN];
    int cnt;
} TracePointer;

int CompareChar(const void *a, const void *b)
{
    return *(char *)a - *(char *)b;
}


void BackTrace(char* s, int len, TracePointer *trace, char **res, int* returnSize)
{
    if (trace->cnt == len) {
        res[(*returnSize)] = (char *)malloc(sizeof(char) * (len + 1));
        memset(res[(*returnSize)], 0, sizeof(char) * (len + 1));
        memcpy(res[(*returnSize)], trace->item, sizeof(char) * (len));

        (*returnSize)++;
    }


    for (int i = 0; i < len; i++) {
        if ((i > 0) && (s[i] == s[i - 1]) && trace->visit[i - 1] == REMOVE) {
            continue;
        }

        if (trace->visit[i] == USING) {
            continue;
        }

        trace->visit[i] = USING;
        trace->item[trace->cnt++] = s[i];
        BackTrace(s, len, trace, res, returnSize);
        trace->visit[i] = REMOVE;
        trace->item[--trace->cnt] = 0;
    }
}

char** permutation(char* s, int* returnSize)
{
    int len = strlen(s);
    char **res = (char **)malloc(sizeof(char *) * MAX_RES_LEN);
    memset(res, 0, sizeof(char *) * MAX_RES_LEN);
    *returnSize = 0;


    if (len == 1) {
        res[0] = (char *)malloc(sizeof(char) * 2);
        memset(res[0], 0, sizeof(char) * 2);
        res[0][0] = s[0];
        *returnSize = 1;

        return res;
    }

    char temp[MAX_ROW_LEN] = { 0 };
    for (int i = 0; i < len; i++) {
        temp[i] = s[i];
    }


    qsort(temp, len, sizeof(char), CompareChar);

    TracePointer trace = { INIT };
    BackTrace(temp, len, &trace, res, returnSize);

    return res;
}
// ---------------------------解法 结束----------------------------------------------------------------------












// ---------------------------解法 开始-----动态规划 记忆化搜索: ----memTable一定要注意表达 可以表达唯一结果的递归路径,维度不够时，不同结果的的递归路径被误当做相同的路径，维度太多时，剪枝效果不大------------------

// ---------------------------解法 结束----------------------------------------------------------------------







// ---------------------------解法 开始-----动态规划 按顺序递推-----------------------------------------------------

// ---------------------------解法 结束--------------------------------------------------------------------










// ---------------------------解法 开始-----贪心 --------------------------------------------------------

// ---------------------------解法 结束-----------------------------------------------------------------------








int main(int argc, const char *argv[])
{




    return 0;
}
