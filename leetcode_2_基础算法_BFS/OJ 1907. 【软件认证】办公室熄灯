/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : OJ 1907. 【软件认证】办公室熄灯. https://oj.rnd.huawei.com/problems/1907/details
 * 作    者   :
 * 生成日期   :

 * 
      --- 
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <limits.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
#include "securec.h"
// #include "vos_priorityqueue.h"





/*
题目描述
软件攻城狮小E准备下班的时候，发现办公室只剩下他自己了，但是灯全部还开着，一方面他想关掉灯节省资源，可另一方面他又得赶班车。办公室的布局可用一个正方形矩阵表示，其中：
0：表示空位，可以通过；
1：表示桌子，不可通过；
2：表示一盏灯（假设灯和开关一体的），可以通过；
3：表示小E工位（只有一个），可以通过；
4：表示办公室门口（只有一个），可以通过；

现给定办公室布局信息及赶班车所需的最少时间，请帮小E计算在不耽误赶班车的情况，最多来得及熄掉几盏灯；如果小E无论如何都赶不上班车，则输出-1。 假设：

小E每一秒可以向上/下/左/右移动一个单位。
最后到达办公室门口，出门口即认为可赶上班车。
解答要求
时间限制：1000ms, 内存限制：256MB
输入
首行一个整数 timeLimit，表示赶班车所需的最少时间，即小E要在 timeLimit 秒内（小于或等于）赶到办公室门口（可经过而暂不出去），其值范围：[1, 20000]
第二行一个整数 size，表示办公室正方矩形的边长，其值范围：[2, 50]
随后 size 行，每行 size 个整数，表示办公室的布局， 值为0,1,2,3,4其中一个。（其中 2 所表示的灯的数量 小于等于 11）
输出
一个整数，代表小E最多能熄掉几盏灯；或者 -1。

样例
输入样例 1 复制

8
5
0 0 0 0 0
0 3 0 2 0
0 0 2 0 0
0 0 0 0 0
0 0 0 0 4
输出样例 1

2
提示样例 1
小E可以把两盏灯都关掉，用时刚好8秒（其中一条可行路径为：右->右->下->左->下->下->右->右）。



输入样例 2 复制

3
4
0 0 0 0
0 0 0 2
0 0 4 0
0 0 0 3
输出样例 2

0
提示样例 2
小E来不及关灯，但可以走到门口，故返回0。



输入样例 3 复制

10
3
3 1 2
0 1 0
0 1 4
输出样例 3

-1
提示样例 3
小E给3张桌子挡着过不去，无论如何都赶不上班车，故输出-1。

*/




// ---------------------------解法 双向BFS-----------------------------------------------------


#define MAX_SIZE 50

typedef struct Posotion {
    int row;
    int col;
} Posotion;
typedef struct Queue {
    Posotion queue[MAX_SIZE * MAX_SIZE];
    int head;
    int tail;
} Queue;
Queue g_queueIn;
Queue g_queueOut;


typedef struct StepInfo {
    int step;
    bool visit;
} StepInfo;
StepInfo g_inStep[MAX_SIZE][MAX_SIZE];
StepInfo g_outStep[MAX_SIZE][MAX_SIZE];

int g_dir[4][2] = {
    { 1, 0 },
    { -1, 0 },
    { 0, 1 },
    { 0, -1 },
};

void printfMatrix(int n)
{
    for (int i  = 0; i < n; i++) {
        for (int j  = 0; j < n; j++) {
            printf("%-20d", g_inStep[i][j].step);
        }
        printf("\n");
    }
    printf("\n");


    for (int i  = 0; i < n; i++) {
        for (int j  = 0; j < n; j++) {
            printf("%-20d", g_outStep[i][j].step);
        }
        printf("\n");
    }
    printf("\n");
}

void Bfs(Queue* poQue, int **officeLayout, int timeLimit, int size, StepInfo stepInfo[][MAX_SIZE])
{
    int step = 1;

    while (poQue->head > poQue->tail && step <= timeLimit) {
        int start = poQue->tail;
        int end = poQue->head;
        
        for (; start < end; start++) {
            Posotion po = poQue->queue[start];
            for (int i = 0; i < 4; i++) {
                int nextRow = po.row + g_dir[i][0];
                int nextCol = po.col + g_dir[i][1];
                if (nextRow >= 0 && nextRow < size && nextCol >= 0 && nextCol < size && 
                    officeLayout[nextRow][nextCol] != 1 && 
                    stepInfo[nextRow][nextCol].visit == false) {
                    Posotion po = { nextRow, nextCol };
                    poQue->queue[poQue->head++] = po;
                    stepInfo[nextRow][nextCol].visit = true;
                    stepInfo[nextRow][nextCol].step = step;
                }
            }
        }
        poQue->tail = start;
        step++;
    }
}


// 待实现函数，在此函数中填入答题代码
int GetLightsOffNum(int timeLimit, int size, int **officeLayout) 
{
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            g_inStep[i][j].step = 10000000;
            g_inStep[i][j].visit = false;
            g_outStep[i][j].step = 10000000;
            g_outStep[i][j].visit = false;
        }
    }

    memset_s(&g_queueIn, (size_t)sizeof(g_queueIn), 0, (size_t)sizeof(g_queueIn));
    memset_s(&g_queueOut, (size_t)sizeof(g_queueOut), 0, (size_t)sizeof(g_queueOut));

    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            if (officeLayout[i][j] == 3) {
                Posotion po = { i, j };
                g_queueIn.queue[g_queueIn.head++] = po;
                g_inStep[i][j].step = 0;
                g_inStep[i][j].visit = true;
                Bfs(&g_queueIn, officeLayout, timeLimit, size, &g_inStep[0]);
            }
            if (officeLayout[i][j] == 4) {
                Posotion po = { i, j };
                g_queueOut.queue[g_queueOut.head++] = po;
                g_outStep[i][j].step = 0;
                g_outStep[i][j].visit = true;
                Bfs(&g_queueOut, officeLayout, timeLimit, size, &g_outStep[0]);
            }
        }
    }

    // printfMatrix(size);


    int res = 0;
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            if (officeLayout[i][j] == 4) {
                if (g_inStep[i][j].step > timeLimit) {
                    return -1;
                }
            }
            if (officeLayout[i][j] == 2 && g_inStep[i][j].step + g_outStep[i][j].step <= timeLimit) { // 槽这里翻转后截断了
                res++;
            }
        }
    }

    return res;
}

int main(void) 
{
    int timeLimit;
    if (scanf_s("%d", &timeLimit) != 1) {
        return -1;
    }
    int size;
    if (scanf_s("%d", &size) != 1) {
        return -1;
    }

    int buf[MAX_SIZE][MAX_SIZE];
    int* officeLayout[MAX_SIZE];
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            if (scanf_s("%d", &buf[i][j]) != 1) {
                return -1;
            }
        }
        officeLayout[i] = buf[i];
    }

    int output = GetLightsOffNum(timeLimit, size, officeLayout);
    printf("%d", output);
    
    return 0;
}


/*
11
5
2 2 2 0 0
3 1 2 2 2
1 2 2 2 1
0 0 2 1 0
0 0 2 4 0


*/

// ---------------------------解法 结束---------------------------------------------------------------------


