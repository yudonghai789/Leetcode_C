/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.
 */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
#include "securec.h"
#include "systemDesgin.h"
#include <math.h>
#include <assert.h>


/**
 * leetcode 53. 最大子数组和  https://leetcode-cn.com/problems/maximum-subarray/
 * 「力扣」第 53 题（最大子序和）是「力扣」第 124 题（二叉树的最大路径和）的线性版本
 */


// ---------------------------解法一 开始--------------------------------------------------------------------

// ---------------------------解法一 结束--------------------------------------------------------


// ---------------------------解法一 开始--------------------------------------------------------------------
#define MAX_DP_LENGTH 100010
int dpMem[MAX_DP_LENGTH];

int maxSubArray(int* nums, int numsSize)
{
    memset(dpMem, 0, sizeof(int) * MAX_DP_LENGTH);

    int result = nums[0];
    dpMem[0] = nums[0];
    for (int i = 1; i < numsSize; i++) {
        dpMem[i] = fmax(dpMem[i - 1] + nums[i], nums[i]);
        result = fmax(result, dpMem[i]);
    }

    return result;
}

// ---------------------------解法一 结束--------------------------------------------------------



// ---------------------------解法一 结束--------------------------------------------------------



int main()
{
    int nums_1[]= { -2,1,-3,4,-1,2,1,-5,4 };
    int numsSize_1 = sizeof(nums_1) / sizeof(nums_1[0]);
	int result_1 = maxSubArray(nums_1, numsSize_1);
	assert(result_1 == 6);

    int nums_2[]= { 1 };
    int numsSize_2 = sizeof(nums_2) / sizeof(nums_2[0]);
	int result_2 = maxSubArray(nums_2, numsSize_2);
	assert(result_2 == 1);


    int nums_3[]= { 5,4,-1,7,8 };
    int numsSize_3 = sizeof(nums_3) / sizeof(nums_3[0]);
	int result_3 = maxSubArray(nums_3, numsSize_3);
	assert(result_3 == 23);
    
    int nums_4[]= { -1, -1, -2, };
    int numsSize_4 = sizeof(nums_4) / sizeof(nums_4[0]);
	int result_4 = maxSubArray(nums_4, numsSize_4);
	assert(result_4 == -1);

    return 0;
}

