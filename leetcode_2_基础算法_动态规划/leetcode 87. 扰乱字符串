/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : leetcode 87. 扰乱字符串. https://leetcode-cn.com/problems/scramble-string/
 * 作    者   :
 * 生成日期   :

 * 动态规划 
      --- 
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"





/*
87. 扰乱字符串
使用下面描述的算法可以扰乱字符串 s 得到字符串 t ：
如果字符串的长度为 1 ，算法停止
如果字符串的长度 > 1 ，执行下述步骤：
在一个随机下标处将字符串分割成两个非空的子字符串。即，如果已知字符串 s ，则可以将其分成两个子字符串 x 和 y ，且满足 s = x + y 。
随机 决定是要「交换两个子字符串」还是要「保持这两个子字符串的顺序不变」。即，在执行这一步骤之后，s 可能是 s = x + y 或者 s = y + x 。
在 x 和 y 这两个子字符串上继续从步骤 1 开始递归执行此算法。
给你两个 长度相等 的字符串 s1 和 s2，判断 s2 是否是 s1 的扰乱字符串。如果是，返回 true ；否则，返回 false 。

 

示例 1：

输入：s1 = "great", s2 = "rgeat"
输出：true
解释：s1 上可能发生的一种情形是：
"great" --> "gr/eat" // 在一个随机下标处分割得到两个子字符串
"gr/eat" --> "gr/eat" // 随机决定：「保持这两个子字符串的顺序不变」
"gr/eat" --> "g/r / e/at" // 在子字符串上递归执行此算法。两个子字符串分别在随机下标处进行一轮分割
"g/r / e/at" --> "r/g / e/at" // 随机决定：第一组「交换两个子字符串」，第二组「保持这两个子字符串的顺序不变」
"r/g / e/at" --> "r/g / e/ a/t" // 继续递归执行此算法，将 "at" 分割得到 "a/t"
"r/g / e/ a/t" --> "r/g / e/ a/t" // 随机决定：「保持这两个子字符串的顺序不变」
算法终止，结果字符串和 s2 相同，都是 "rgeat"
这是一种能够扰乱 s1 得到 s2 的情形，可以认为 s2 是 s1 的扰乱字符串，返回 true
示例 2：

输入：s1 = "abcde", s2 = "caebd"
输出：false
示例 3：

输入：s1 = "a", s2 = "a"
输出：true
 

提示：

s1.length == s2.length
1 <= s1.length <= 30
s1 和 s2 由小写英文字母组成
*/





// ---------------------------解法 开始-----暴力遍历: -----------------------------------------------------

// ---------------------------解法 结束---------------------------------------------------------------------







// ---------------------------解法 开始-----BFS 递归模板: -----------------------------------------------------

// ---------------------------解法 结束---------------------------------------------------------------------











// ---------------------------解法 开始-----BFS 迭代模板: -----------------------------------------------------

// ---------------------------解法 结束-----------------------------------------------------------------------










// ---------------------------解法 开始-----DFS 递归模板: -----------------------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------











// ---------------------------解法 开始-----DFS 迭代模板: --------------------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------











// ---------------------------解法 开始-----动态规划 记忆化搜索: ----memTable一定要注意表达 可以表达唯一结果的递归路径,维度不够时，不同结果的的递归路径被误当做相同的路径，维度太多时，剪枝效果不大------------------
// #define MAX_ARR_LEN 31

// int g_memTable[MAX_ARR_LEN][MAX_ARR_LEN][MAX_ARR_LEN][MAX_ARR_LEN];      // g_memTable[s1start][s1end][startPosition][endPosition]  表示，s1 s1start~s1end字符串  排列在 startPosition~endPosition 是否有解

// bool DpRecursive(char * s1, int startChar, int endChar, int startPosition, int endPosition, char * s2)
// {
//     int *ans = &g_memTable[startChar][endChar][startPosition][endPosition];

//     if (*ans != 0xf0f0f0f0) {
//         return *ans;
//     }

//     int resAll = true;
//     for (int i = 0; i <= endChar - startChar; i++) {
//         if (s1[startChar + i] != s2[startPosition + i]) {
//             resAll = false;
//             break;
//         }
//     }
//     if (resAll == true) {
//         *ans = true;
//         return true;
//     }

//     if (startPosition == endPosition) {
//         if (s1[startChar] == s2[startPosition]) {
//             *ans = true;
//             return true;
//         }
//     }


//     bool res = false;
//     for (int i = 0; i <= endChar - startChar - 1 ; i++) {
//         bool res1 = true;
//         res1 &= DpRecursive(s1, startChar, startChar + i, startPosition, startPosition + i, s2);
//         res1 &= DpRecursive(s1, startChar + i + 1, endChar, startPosition + i + 1, endPosition, s2);

//         bool res2 = true;
//         res2 &= DpRecursive(s1, startChar, startChar + i, endPosition - i, endPosition, s2);
//         res2 &= DpRecursive(s1, startChar + i + 1, endChar, startPosition, endPosition - i - 1, s2);


//         res = (res1 || res2);
//         if (res == true) {
//             *ans = true;
//             return true;
//         }
//     }

//     *ans = false;
//     return false;
// }


// bool isScramble(char * s1, char * s2)
// {
//     memset(g_memTable, 0xf0, sizeof(g_memTable));
//     return DpRecursive(s1, 0, strlen(s1) - 1, 0, strlen(s1) - 1, s2);
// }
// ---------------------------解法 结束----------------------------------------------------------------------







// ---------------------------解法 开始-----动态规划 按顺序递推-----------------------------------------------------
#define MAX_ARR_LEN 31

int g_dpTable[MAX_ARR_LEN][MAX_ARR_LEN][MAX_ARR_LEN][MAX_ARR_LEN];  // g_memTable[s1start][s1end][startPosition][endPosition]  表示，s1 s1start~s1end字符串  排列在 startPosition~endPosition 是否有解

//  int startChar, int endChar, int startPosition, int endPosition,

bool DpIter(char * s1, char * s2)
{
    int s1Len = strlen(s1);
    int s2Len = strlen(s2);



    for (int start = 0; start <= s1Len - 1; start++) {
        bool thisRes = false;
        for (int changePoin = 0; changePoin <= len - 1; changePoin++) {
            int shubCharEnd = start + len;
            int changePosi = start + changePoin;

            if () {

            }
            bool change1 = true;
            change1 &= g_dpTable[start][changePosi][start][changePosi];
            change1 &= g_dpTable[changePosi + 1][shubCharEnd][changePosi + 1][shubCharEnd];

            bool change2 = true;
            change2 &= g_dpTable[start][changePosi][shubCharEnd - changePoin][shubCharEnd];
            change2 &= g_dpTable[changePosi + 1][shubCharEnd][start][shubCharEnd - changePoin - 1];
            
            thisRes = (change1 || change2);

            if (thisRes == true) {
                g_dpTable[start][start + len][start][start + len] = true;
            }
        }
    }
    


    /*

        g_dpTable[0][1][0][1] = (g_dpTable[0][0][0][0] && g_dpTable[1][1][1][1]) || (g_dpTable[0][0][1][1] && g_dpTable[1][1][0][0])
        g_dpTable[1][2][1][2] = (g_dpTable[0][0][0][0] && g_dpTable[1][1][1][1]) || (g_dpTable[0][0][1][1] && g_dpTable[1][1][0][0])



    */

    for (int len = 1; len <= s1Len - 1; len++) {   // len = 1 时 表示  [0][1]
        int end = s1Len - len - 1;
        for (int start = 0; start <= end; start++) {
            bool thisRes = false;
            for (int changePoin = 0; changePoin <= len - 1; changePoin++) {
                int shubCharEnd = start + len;
                int changePosi = start + changePoin;


                bool change1 = true;
                change1 &= g_dpTable[start][changePosi][start][changePosi];
                change1 &= g_dpTable[changePosi + 1][shubCharEnd][changePosi + 1][shubCharEnd];

                bool change2 = true;
                change2 &= g_dpTable[start][changePosi][shubCharEnd - changePoin][shubCharEnd];
                change2 &= g_dpTable[changePosi + 1][shubCharEnd][start][shubCharEnd - changePoin - 1];
                
                thisRes = (change1 || change2);

                if (thisRes == true) {
                    g_dpTable[start][start + len][start][start + len] = true;
                }
            }
        }
    }


    return g_dpTable[0][s1Len][0][s1Len];
}

bool isScramble(char * s1, char * s2)
{
    memset(g_dpTable, 0xf0, sizeof(g_dpTable));
    return DpIter(s1, s2);
}
// ---------------------------解法 结束--------------------------------------------------------------------










// ---------------------------解法 开始-----贪心 ----------------------------------------------------------

// ---------------------------解法 结束-----------------------------------------------------------------------






int main(int argc, const char *argv[])
{
    char s1_1[] = "a";
    char s2_1[] = "a";
    bool res_1 = isScramble(s1_1, s2_1);
    assert(res_1 == true);

    char s1_2[] = "ba";
    char s2_2[] = "ab";
    bool res_2 = isScramble(s1_2, s2_2);
    assert(res_2 == true);

    char s1_3[] = "great";
    char s2_3[] = "rgeat";
    bool res_3 = isScramble(s1_3, s2_3);
    assert(res_3 == true);

    char s1_4[] = "abcde";
    char s2_4[] = "caebd";
    bool res_4 = isScramble(s1_4, s2_4);
    assert(res_4 == true);


    return 0;
}
