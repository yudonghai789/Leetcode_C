/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : leetcode 509. 斐波那契数  https://leetcode-cn.com/problems/fibonacci-number/submissions/
 * 作    者   :
 * 生成日期   :
 * 动态规划的入门
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"



/*
509. 斐波那契数
斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：

F(0) = 0，F(1) = 1
F(n) = F(n - 1) + F(n - 2)，其中 n > 1
给定 n ，请计算 F(n) 。

 

示例 1：

输入：n = 2
输出：1
解释：F(2) = F(1) + F(0) = 1 + 0 = 1
示例 2：

输入：n = 3
输出：2
解释：F(3) = F(2) + F(1) = 1 + 1 = 2
示例 3：

输入：n = 4
输出：3
解释：F(4) = F(3) + F(2) = 2 + 1 = 3
 

提示：

0 <= n <= 30


*/





// ---------------------------解法 开始-----自顶向下---递归-----------------------------------------------------
// int Recursive(int n) {
//     if ((n == 0) || (n == 1)) {
//         return n;
//     }

//     return  Recursive(n-1) + Recursive(n-2);
// }


// int fib(int n) 
// {
//     int result = Recursive(n);

//     return result;
// }
// ---------------------------解法一 结束-------------------------------------------------------------



// ---------------------------解法 开始------自顶向下---递归 + 备忘录------------------------------------------------------
// int Recursive(int* memory, int n) {
//     if ((n == 0) || (n == 1)) {
//         return n;
//     }

//     if (memory[n] != 0) {
//         return memory[n];
//     }

//     memory[n] = Recursive(memory, n-1) + Recursive(memory, n-2);
//     return memory[n];
// }


// int fib(int n) 
// {
//     int memory[31];
    
//     int result = Recursive(memory, n);

//     return result;
// }
// ---------------------------解法 结束--------------------------------------------------------





// ---------------------------解法 开始-----自底向上---递归-----------------------------------------------------
// void Recursive(int n, int step, int step_2_Val, int step_1_Val, int *result)
// {
//     if (step > n) {
//         return;
//     }

//     int thisStep =  step_2_Val + step_1_Val;
//     *result = thisStep;

//     Recursive(n, step + 1, step_1_Val, thisStep, result);
// }


// int fib(int n) 
// {
//     if ((n == 0) || (n == 1)) {
//         return n;
//     }

//     int result = 0;
//     Recursive(n, 2, 0, 1, &result);

//     return result;
// }
// ---------------------------解法一 结束-------------------------------------------------------------





// ---------------------------解法 开始-------子底向上-----动态规划（就是递归的迭代写法）--DpTable------------------------------------------------
// int fib(int n) 
// {
//     int memory[31];

//     memory[0] = 0;
//     memory[1] = 1;

//     for (int i = 2; i <= n; i++) {
//         memory[i] = memory[i-1] + memory[i-2];
//     }
    
//     return memory[n];
// }
// ---------------------------解法 结束-------------------------------------------------------------






// ---------------------------解法 开始---子底向上-----动态规划--DpTable优化-------------------------------------------------------------
// int fib(int n) {
//     if ((n == 0) || (n == 1)) {
//         return n;
//     }

//     int tempN_1 = 0;
//     int tempN_2 = 1;
//     for (int i = 2; i <= n; i++) {
//         int sum = tempN_1 + tempN_2;
//         tempN_1 = tempN_2;
//         tempN_2 = sum;
//     }
    
//     return tempN_2;
// }
// ---------------------------解法一 结束-------------------------------------------------------------


int main() {
    int n_1 = 3;
    int result_1 = fib(n_1);
    assert(result_1 = 1);


    return 0;
}



