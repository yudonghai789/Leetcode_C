/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : leetcode 62. 不同路径  https://leetcode-cn.com/problems/unique-paths/
 * 作    者   :
 * 生成日期   :
 * 从前往后递归不能使用备忘录，因为前面的结果先计算，后面的结果后计算，但是前面的结果是依赖后面数据，所以不能使用备忘录
 * 递推只能是后面根据前面的结果递推
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"


/*
62. 不同路径
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。

问总共有多少条不同的路径？

 

示例 1：


输入：m = 3, n = 7
输出：28
示例 2：

输入：m = 3, n = 2
输出：3
解释：
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向下 -> 向下
2. 向下 -> 向下 -> 向右
3. 向下 -> 向右 -> 向下
示例 3：

输入：m = 7, n = 3
输出：28
示例 4：

输入：m = 3, n = 3
输出：6
 

提示：

1 <= m, n <= 100
题目数据保证答案小于等于 2 * 109
*/



// ---------------------------解法 开始-----BFS 递归模板: -----------------------------------------------------

// ---------------------------解法 结束-------------------------------------------------------------



// ---------------------------解法 开始-----BFS 迭代模板: -----------------------------------------------------

// ---------------------------解法 结束-------------------------------------------------------------





// ---------------------------解法 开始-----DFS 递归模板: -----------------------------------------------------
// #define MAX_ROW 101
// #define MAX_COL 101
// int g_memTable[MAX_ROW][MAX_COL];
// int g_move[2][2] = {
//     { 1, 0 },
//     { 0, 1 }
// };

// void DfsRecursive(int m, int n, int startRow, int startCol, int *result)
// {
//     if ((startRow == m - 1) && (startCol == n - 1)) {
//         (*result) = 1;
//         return;
//     }

//     if (g_memTable[startRow][startCol] != 0xf0f0f0f0) {
//         *result = g_memTable[startRow][startCol];
//         return;
//     }

//     int res = 0;
//     for (int i = 0; i < 2; i++) {
//         int nextRow = startRow + g_move[i][0];
//         int nextCol = startCol + g_move[i][1];
//         if ((nextRow >= m) || (nextCol >= n)) {
//             continue;
//         }
//         int once = 0;
//         DfsRecursive(m, n, nextRow, nextCol, &once);
//         res = res + once;
//     }
//     *result = res;
//     g_memTable[startRow][startCol] = res;
// }

// int uniquePaths(int m, int n)
// {
//     if ((m == 1) && (n == 1)) {
//         return 1;
//     }

//     memset(g_memTable, 0xf0, sizeof(g_memTable));

//     int result = 0;
//     DfsRecursive(m, n, 0, 0, &result);
//     return result;
// }
// ---------------------------解法 结束-------------------------------------------------------------


// ---------------------------解法 开始-----DFS 迭代模板: -----迭代的写法十分复杂，维护队列，栈十分困难--未完成----------------------------------------------

// ---------------------------解法 结束-------------------------------------------------------------



// ---------------------------解法 开始-----动态规划 ------动态规划就是一步一步转化状态，状态就是递归过程中会重复出现的递归过程--------关键是，计算当前节点的时候要先把相邻的比它大的节点先计算出------------------
#define MAX_ROW 3
#define MAX_COL 7
int g_dpTable[MAX_ROW][MAX_COL];
int g_move[2][2] = {
    { 1, 0 },
    { 0, 1 }
};

void Dp(int m, int n)
{
    // 初始化
    g_dpTable[0][0] = 1;

    // 状态转移
    for (int row = 0; row < m; row++) {
        for (int col = 0; col < n; col++) {
            for (int i = 0; i < 2; i++) {
                int nextRow = row + g_move[i][0];
                int nextCol = col + g_move[i][1];
                if ((nextRow >= m) || (nextCol >= n)) {
                    continue;
                }

                g_dpTable[nextRow][nextCol] += g_dpTable[row][col];
            }
        }
    }
}

int uniquePaths(int m, int n)
{
    if ((m == 1) && (n == 1)) {
        return 1;
    }

    memset(g_dpTable, 0, sizeof(g_dpTable));
    Dp(m, n);
    return g_dpTable[m - 1][n - 1];
}
// ---------------------------解法 结束-------------------------------------------------------------





int main()
{
    uniquePaths(3, 7);

    return 0;
}
