/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : leetcode 403. 青蛙过河. https://leetcode-cn.com/problems/frog-jump/
 * 作    者   :
 * 生成日期   :

 * 动态规划 
      --- 
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"





/*
403. 青蛙过河
一只青蛙想要过河。 假定河流被等分为若干个单元格，并且在每一个单元格内都有可能放有一块石子（也有可能没有）。 青蛙可以跳上石子，但是不可以跳入水中。

给你石子的位置列表 stones（用单元格序号 升序 表示）， 请判定青蛙能否成功过河（即能否在最后一步跳至最后一块石子上）。开始时， 青蛙默认已站在第一块石子上，并可以假定它第一步只能跳跃 1 个单位（即只能从单元格 1 跳至单元格 2 ）。

如果青蛙上一步跳跃了 k 个单位，那么它接下来的跳跃距离只能选择为 k - 1、k 或 k + 1 个单位。 另请注意，青蛙只能向前方（终点的方向）跳跃。

 

示例 1：

输入：stones = [0,1,3,5,6,8,12,17]
输出：true
解释：青蛙可以成功过河，按照如下方案跳跃：跳 1 个单位到第 2 块石子, 然后跳 2 个单位到第 3 块石子, 接着 跳 2 个单位到第 4 块石子, 然后跳 3 个单位到第 6 块石子, 跳 4 个单位到第 7 块石子, 最后，跳 5 个单位到第 8 个石子（即最后一块石子）。
示例 2：

输入：stones = [0,1,2,3,4,8,9,11]
输出：false
解释：这是因为第 5 和第 6 个石子之间的间距太大，没有可选的方案供青蛙跳跃过去。
 

提示：

2 <= stones.length <= 2000
0 <= stones[i] <= 231 - 1
stones[0] == 0
stones 按严格升序排列
*/





// ---------------------------解法 开始-----暴力遍历: -----------------------------------------------------

// ---------------------------解法 结束---------------------------------------------------------------------







// ---------------------------解法 开始-----BFS 递归模板: -----------------------------------------------------

// ---------------------------解法 结束---------------------------------------------------------------------











// ---------------------------解法 开始-----BFS 迭代模板: -----------------------------------------------------

// ---------------------------解法 结束-----------------------------------------------------------------------










// ---------------------------解法 开始-----DFS 递归模板: -----------------------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------











// ---------------------------解法 开始-----DFS 迭代模板: --------------------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------











// ---------------------------解法 开始-----动态规划 记忆化搜索: ----memTable一定要注意表达 可以表达唯一结果的递归路径,维度不够时，不同结果的的递归路径被误当做相同的路径，维度太多时，剪枝效果不大------------------
// #define MAX_POSITION 2001
// #define JUMP_STEP 2001


// int g_memTable[MAX_POSITION][JUMP_STEP];   // g_memTable[positionIndex][kstep] 表示当前位置为positionIndex， 上一次跳跃了 kstep 距离，往后能否到达终点

// int IsNextJump(int* stones, int stonesSize, int nowIndex, int targetPosition)
// {
//     if (nowIndex + 1 >= stonesSize) {
//         return -1;
//     }   

//     for (int i = nowIndex + 1; i < stonesSize; i++) {
//         if (stones[i] == targetPosition) {
//             return i;
//         }
//     }

//     return -1;
// }



// bool DpRecursive(int* stones, int stonesSize, int positionIndex, int position, int kstep)   // positionIndex 当前位置的index  ;  position 当前位置   ;  kstep 上一次跳跃的距离，可一次可以跳跃 kstep - 1，  kstep,  kstep + 1
// {
//     if (stones[stonesSize - 1] == position) {
//         return true;
//     }


//     if (g_memTable[positionIndex][kstep] != 0xf0f0f0f0) {
//         return (g_memTable[positionIndex][kstep] == 1) ? true : false;
//     }

//     for (int i = kstep - 1; i <= kstep + 1; i++) {
//         if (i <= 0) { continue; }   // 不能倒退或者原地跳
//         int nextPosition = IsNextJump(stones, stonesSize, positionIndex, position + i);
//         if (nextPosition != -1) {
//             bool res = DpRecursive(stones, stonesSize, nextPosition, position + i, i);
//             if (res == true) {
//                 g_memTable[positionIndex][kstep] = true;
//                 return true;
//             }
//         }
//     }

//     g_memTable[positionIndex][kstep] = false;
//     return false;
// }


// bool canCross(int* stones, int stonesSize)
// {
//     if (stonesSize == 1) {
//         return true;
//     }

//     memset(g_memTable, 0xf0, sizeof(g_memTable));

//     bool res = DpRecursive(stones, stonesSize, 0, stones[0], 0);
//     return res;
// }
// ---------------------------解法 结束----------------------------------------------------------------------







// ---------------------------解法 开始-----动态规划 按顺序递推-----------------------------------------------------
#define MAX_POSITION 2001
#define JUMP_STEP 2001

bool g_dpTable[MAX_POSITION][JUMP_STEP];   // g_dpTable[positionIndex][kstep] 表示当前位置为positionIndex， 上一次跳跃了 kstep 距离，能够从起点到达这里


int IsPreJump(int* stones, int stonesSize, int nowIndex, int targetPosition)
{
    if ((nowIndex - 1 < 0) || (nowIndex - 1 >= stonesSize)) {
        return -1;
    }   

    for (int i = nowIndex - 1; i >= 0; i--) {
        if (stones[i] == targetPosition) {
            return i;
        }
    }

    return -1;
}

bool DpIter(int* stones, int stonesSize)   // positionIndex 当前位置的index  ;  position 当前位置   ;  kstep 上一次跳跃的距离，可一次可以跳跃 kstep - 1，  kstep,  kstep + 1
{
    if (stones[1] - stones[0] != 1) {
        return false;
    } 

    g_dpTable[0][0] = true;
    g_dpTable[1][1] = true;    // 第一步只能跳一步，只能跳到位置一 

    /*

        stones[1] - stones[0] == 1     第一步只能跳一步，只能跳到位置一： 如果不相等，说明位置一与位置零的距离不为1，则无解
        g_dpTable[0][0] = true;  表示在位置0，不起跳，
        g_dpTable[1][1] = true  表示在位置1，通过跳一步到达这里

        // g_dpTable[positionIndex][kstep] 表示当前位置为positionIndex， 上一次跳跃了 kstep 距离，能够从起点到达这里
        for (kstep) { g_dpTable[stonesSize - 1][kstep]  == true }  则表示能跳到最后的位置


        g_dpTable[][]


    */


    // 通过当前位置，看能到达那个位置
    for (int position = 2; position < stonesSize; position++ ) {
        for (int step = 1; step <= position; step++) {
            // 递推
            int preIndex = IsPreJump(stones, stonesSize, position, stones[position] - step);
            if (preIndex != -1) {
                g_dpTable[position][step] |= g_dpTable[preIndex][step - 1] || g_dpTable[preIndex][step] || g_dpTable[preIndex][step + 1];
            }
        }
    }
    

    // 推完看结果
    for (int step = 1; step <= stonesSize; step++) {
        if (g_dpTable[stonesSize - 1][step] == true) {
            return true;
        }
    }
    return false;
}



bool canCross(int* stones, int stonesSize)
{
    if (stonesSize == 1) {
        return true;
    }

    memset(g_dpTable, 0, sizeof(g_dpTable));

    bool res = DpIter(stones, stonesSize);
    return res;
}

// ---------------------------解法 结束--------------------------------------------------------------------










// ---------------------------解法 开始-----贪心 ----------------------------------------------------------

// ---------------------------解法 结束-----------------------------------------------------------------------






int main(int argc, const char *argv[])
{
    int stones_1[] = { 0,1,3,5,6,8,12,17 };
    int stonesSize_1 = sizeof(stones_1) / sizeof(stones_1[0]);
    bool res_1 = canCross(stones_1, stonesSize_1);
    assert(res_1 == true);

    int stones_2[] = { 0,2 };
    int stonesSize_2 = sizeof(stones_2) / sizeof(stones_2[0]);
    bool res_2 = canCross(stones_2, stonesSize_2);
    assert(res_2 == false);

    int stones_3[] = { 0,1,3,4,5,7,9,10,12 };
    int stonesSize_3 = sizeof(stones_3) / sizeof(stones_3[0]);
    bool res_3 = canCross(stones_3, stonesSize_3);
    assert(res_3 == true);

    int stones_4[] = { 0,1,3,5,6,8,12,17 };
    int stonesSize_4 = sizeof(stones_4) / sizeof(stones_4[0]);
    bool res_4 = canCross(stones_4, stonesSize_4);
    assert(res_4 == true);

    return 0;
}
