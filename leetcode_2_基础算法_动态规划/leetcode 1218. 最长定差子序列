/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : leetcode 1218. 最长定差子序列  https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference/
 * 作    者   :
 * 生成日期   :
 * 动态规划 -
      --- 最长递增子序列问题
         --- 这类题用递归不好写
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"





/*
1218. 最长定差子序列
给你一个整数数组 arr 和一个整数 difference，请你找出并返回 arr 中最长等差子序列的长度，该子序列中相邻元素之间的差等于 difference 。

子序列 是指在不改变其余元素顺序的情况下，通过删除一些元素或不删除任何元素而从 arr 派生出来的序列。

 

示例 1：

输入：arr = [1,2,3,4], difference = 1
输出：4
解释：最长的等差子序列是 [1,2,3,4]。
示例 2：

输入：arr = [1,3,5,7], difference = 1
输出：1
解释：最长的等差子序列是任意单个元素。
示例 3：

输入：arr = [1,5,7,8,5,3,4,2,1], difference = -2
输出：4
解释：最长的等差子序列是 [7,5,3,1]。
 

提示：

1 <= arr.length <= 105
-104 <= arr[i], difference <= 104
*/





// ---------------------------解法 开始-----BFS 递归模板: -----------------------------------------------------

// ---------------------------解法 结束-------------------------------------------------------------



// ---------------------------解法 开始-----BFS 迭代模板: -----------------------------------------------------

// ---------------------------解法 结束-------------------------------------------------------------





// ---------------------------解法 开始-----DFS 递归模板: -----------------------------------------------------

// ---------------------------解法 结束-------------------------------------------------------------


// ---------------------------解法 开始-----DFS 迭代模板: -----迭代的写法十分复杂，维护队列，栈十分困难--未完成----------------------------------------------

// ---------------------------解法 结束-------------------------------------------------------------



// ---------------------------解法 开始-----动态规划 ------动态规划就是一步一步转化状态，状态就是递归过程中会重复出现的递归过程--------关键是，计算当前节点的时候要先把相邻的比它大的节点先计算出------超时------------
// #define MAX_ARRAY_LEN 100001
// int g_dpTabel[MAX_ARRAY_LEN];

// int Dp(int* arr, int arrSize, int difference)
// {
//     for (int i = 0; i < arrSize; i++) {
//         g_dpTabel[i] = 1;
//     }
//     int res = g_dpTabel[0];

//     for (int i = 1; i < arrSize; i++) {
//         for (int j = 0; j < i; j++) {
//             if (arr[i] - arr[j] == difference) {              // 直接用hash表去查，代替一个一个遍历
//                 g_dpTabel[i] = fmax(g_dpTabel[i], g_dpTabel[j] + 1);
//                 res = fmax(res, g_dpTabel[i]);
//             }
//         }
//     }

//     return res;
// }

// int longestSubsequence(int* arr, int arrSize, int difference)
// {
//     if (arrSize == 1) {
//         return 1;
//     }

//     int res = Dp(arr, arrSize, difference);

//     return res;
// }
// ---------------------------解法 结束-------------------------------------------------------------







// ---------------------------解法 开始-----动态规划 ------动态规划就是一步一步转化状态，状态就是递归过程中会重复出现的递归过程--------关键是，计算当前节点的时候要先把相邻的比它大的节点先计算出------超时------------
// #define MAX_ARRAY_LEN 100001
// int g_dpTabel[MAX_ARRAY_LEN];

// typedef struct Map {
//     // int val; 
//     // int posiiton;
//     int sublen;
// } Map;


// #define MAX_VAL 100000 // 题目的提示长度有问题
// #define MAX_VAL_LEN MAX_VAL * 2 + 1
// Map g_hash[MAX_VAL_LEN];
// int GetHashVal(int index)
// {
//     return g_hash[index + MAX_VAL].sublen;
// }

// void SetHashVal(int index, int val)
// {
//     g_hash[index + MAX_VAL].sublen = val;
// }


// int Dp(int* arr, int arrSize, int difference)
// {
//     for (int i = 0; i < arrSize; i++) {
//         g_dpTabel[i] = 1;
//     }
//     memset(g_hash, 0, sizeof(g_hash));

//     int res = g_dpTabel[0];
//     SetHashVal(arr[0], 1);

    

//     for (int i = 1; i < arrSize; i++) {
//         if (GetHashVal(arr[i] - difference) != 0) {
//             g_dpTabel[i] = GetHashVal(arr[i] - difference) + 1;
//             SetHashVal(arr[i], g_dpTabel[i]);
//             res = fmax(res, g_dpTabel[i]);
//         } else {
//             SetHashVal(arr[i], 1);
//         }
//     }

//     return res;
// }

// int longestSubsequence(int* arr, int arrSize, int difference)
// {
//     if (arrSize == 1) {
//         return 1;
//     }

//     int res = Dp(arr, arrSize, difference);

//     return res;
// }
// ---------------------------解法 结束-------------------------------------------------------------







int main()
{
    int arr_1[] = { 1,2,3,4 };
    int arrSize_1 = sizeof(arr_1) / sizeof(arr_1[0]);
    int difference_1 = 1;
    int res_1 = longestSubsequence(arr_1, arrSize_1, difference_1);
    assert(res_1 == 4);


    return 0;
}
