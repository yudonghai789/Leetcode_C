/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : leetcode 552. 学生出勤记录 II  https://leetcode-cn.com/problems/student-attendance-record-ii/
 * 作    者   :
 * 生成日期   :

 * 动态规划 
      --- 状态机dp
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"





/*
552. 学生出勤记录 II
可以用字符串表示一个学生的出勤记录，其中的每个字符用来标记当天的出勤情况（缺勤、迟到、到场）。记录中只含下面三种字符：
'A'：Absent，缺勤
'L'：Late，迟到
'P'：Present，到场
如果学生能够 同时 满足下面两个条件，则可以获得出勤奖励：

按 总出勤 计，学生缺勤（'A'）严格 少于两天。
学生 不会 存在 连续 3 天或 连续 3 天以上的迟到（'L'）记录。
给你一个整数 n ，表示出勤记录的长度（次数）。请你返回记录长度为 n 时，可能获得出勤奖励的记录情况 数量 。答案可能很大，所以返回对 109 + 7 取余 的结果。

 

示例 1：

输入：n = 2
输出：8
解释：
有 8 种长度为 2 的记录将被视为可奖励：
"PP" , "AP", "PA", "LP", "PL", "AL", "LA", "LL" 
只有"AA"不会被视为可奖励，因为缺勤次数为 2 次（需要少于 2 次）。
示例 2：

输入：n = 1
输出：3
示例 3：

输入：n = 10101
输出：183236316
 

提示：

1 <= n <= 105
*/





// ---------------------------解法 开始-----暴力遍历: -----------------------------------------------------

// ---------------------------解法 结束---------------------------------------------------------------------







// ---------------------------解法 开始-----BFS 递归模板: -----------------------------------------------------

// ---------------------------解法 结束---------------------------------------------------------------------











// ---------------------------解法 开始-----BFS 迭代模板: -----------------------------------------------------

// ---------------------------解法 结束-----------------------------------------------------------------------










// ---------------------------解法 开始-----DFS 递归模板: -----------------------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------











// ---------------------------解法 开始-----DFS 迭代模板: --------------------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------











// ---------------------------解法 开始-----动态规划 记忆化搜索: ----memTable一定要注意表达 可以表达唯一结果的递归路径,维度不够时，不同结果的的递归路径被误当做相同的路径，维度太多时，剪枝效果不大------------------
// #define MOD 1000000007

// #define MAX_DAYS 100001
// #define A_NUM 2
// #define L_LAST_NUM 3

// int g_memTable[MAX_DAYS][A_NUM][L_LAST_NUM];

// int DfsRecursive(int totalDay, int day, int LlastNum, int Anum)
// {
//     if (day == totalDay - 1) {
//         return 1;              // 已经是最后一天，不用再选下一天的决策了
//     }

//     // if (LlastNum >= 3) {
//     //     return 0;
//     // }


//     if ((day != - 1) && (g_memTable[day][Anum][LlastNum] != 0xf0f0f0f0)) {
//         return g_memTable[day][Anum][LlastNum];
//     }

//     int thisDayRes = 0;
//     for (int i = 0; i < 3; i++) {   // i = 0  下一天选为P   i = 1下一天为L;  i =2 下一天为A
//         if ((Anum >= 1) && (i == 2)) {
//             continue;
//         }

//         if ((LlastNum == 2) && (i == 1)) {
//             continue;          // 当前已经连续迟到两天，下一天不能再迟到
//         }

//         int thisChoose = 0;
//         switch (i) {
//             case 0:
//                 thisChoose = DfsRecursive(totalDay, day + 1, 0, Anum);
//                 break;
//             case 1:
//                 thisChoose = DfsRecursive(totalDay, day + 1, LlastNum + 1, Anum);
//                 break;
//             case 2:
//                 thisChoose = DfsRecursive(totalDay, day + 1, 0, Anum + 1);
//                 break;
//         }
//         thisDayRes = ((thisDayRes + thisChoose % MOD) % MOD);
//     }

//     if (day != - 1) {
//         g_memTable[day][Anum][LlastNum] = thisDayRes;
//     }
//     return thisDayRes;
// }

// int checkRecord(int n)
// {
//     memset(g_memTable, 0xf0, sizeof(g_memTable));

//     return DfsRecursive(n, -1, 0, 0);
// }
// ---------------------------解法 结束----------------------------------------------------------------------







// ---------------------------解法 开始-----动态规划 按顺序递推------------------------------------------------------
// #define MOD 1000000007

// #define MAX_DAYS 100001
// #define A_NUM 2
// #define L_LAST_NUM 3

// long long g_dpTable[MAX_DAYS][A_NUM][L_LAST_NUM];

// int Dp(int totalDay)
// {
//     // 第一天状态初始化
//     g_dpTable[0][0][0] = 1;
//     g_dpTable[0][0][1] = 1;
//     g_dpTable[0][0][2] = 0;
//     g_dpTable[0][1][0] = 1;
//     g_dpTable[0][1][1] = 0;
//     g_dpTable[0][1][2] = 0;


//     /* 前一天的状态
//     g_dpTable[day - 1][0][0]  一天都没有缺席，当前连续迟到数0
//     g_dpTable[day - 1][0][1]  一天都没有缺席，当前连续迟到数1
//     g_dpTable[day - 1][0][2]  一天都没有缺席，当前连续迟到数2
//     g_dpTable[day - 1][1][0]  有一天缺席，当前连续迟到数0
//     g_dpTable[day - 1][1][1]  有一天缺席，当前连续迟到数1
//     g_dpTable[day - 1][1][2]  有一天缺席，当前连续迟到数2

//         // 如果今天选择 P
//         g_dpTable[day - 1][0][0]   ->  g_dpTable[day][0][0]
//         g_dpTable[day - 1][0][1]   ->  g_dpTable[day][0][0]
//         g_dpTable[day - 1][0][2]   ->  g_dpTable[day][0][0]
//         g_dpTable[day - 1][1][0]   ->  g_dpTable[day][1][0]
//         g_dpTable[day - 1][1][1]   ->  g_dpTable[day][1][0]
//         g_dpTable[day - 1][1][2]   ->  g_dpTable[day][1][0]

//         // 如果今天选择 L
//         g_dpTable[day - 1][0][0]   ->  g_dpTable[day][0][1]
//         g_dpTable[day - 1][0][1]   ->  g_dpTable[day][0][2]
//         g_dpTable[day - 1][0][2]   ->  不可选
//         g_dpTable[day - 1][1][0]   ->  g_dpTable[day][1][1]
//         g_dpTable[day - 1][1][1]   ->  g_dpTable[day][1][2]
//         g_dpTable[day - 1][1][2]   ->  不可选

//         // 如果今天选择 A
//         g_dpTable[day - 1][0][0]   ->  g_dpTable[day][1][0]
//         g_dpTable[day - 1][0][1]   ->  g_dpTable[day][1][0]
//         g_dpTable[day - 1][0][2]   ->  g_dpTable[day][1][0]
//         g_dpTable[day - 1][1][0]   ->  不可选
//         g_dpTable[day - 1][1][1]   ->  不可选
//         g_dpTable[day - 1][1][2]   ->  不可选

//     // 几天的状态
//     g_dpTable[day - 1][0][0]  一天都没有缺席，当前连续迟到数0
//     g_dpTable[day - 1][0][1]  一天都没有缺席，当前连续迟到数1
//     g_dpTable[day - 1][0][2]  一天都没有缺席，当前连续迟到数2
//     g_dpTable[day - 1][1][0]  有一天缺席，当前连续迟到数0
//     g_dpTable[day - 1][1][1]  有一天缺席，当前连续迟到数1
//     g_dpTable[day - 1][1][2]  有一天缺席，当前连续迟到数2

//     状态转移就是这样，写法可以不同
//     */

//     for (int day = 1; day < totalDay; day++) {
//         // 本次填入P，分成前一天累计了0个A和1个A两种情况,每种情况下，L连续了0~2次
//         g_dpTable[day][0][0] = (g_dpTable[day - 1][0][0] + g_dpTable[day - 1][0][1] + g_dpTable[day - 1][0][2]) % MOD;
//         g_dpTable[day][1][0] = (g_dpTable[day - 1][1][0] + g_dpTable[day - 1][1][1] + g_dpTable[day - 1][1][2]) % MOD;
//         // 本次填入A，前一天没有累计A都能转移过来
//         // 这行可以与上面一行合并计算，为了方便理解，我们分开，下面会合并
//         g_dpTable[day][1][0] = (g_dpTable[day][1][0] + g_dpTable[day - 1][0][0] + g_dpTable[day - 1][0][1] + g_dpTable[day - 1][0][2]) % MOD;
//         // 本次填入L，前一天最多只有一个连续的L，分成四种情况
//         g_dpTable[day][0][1] = g_dpTable[day - 1][0][0];
//         g_dpTable[day][0][2] = g_dpTable[day - 1][0][1];
//         g_dpTable[day][1][1] = g_dpTable[day - 1][1][0];
//         g_dpTable[day][1][2] = g_dpTable[day - 1][1][1];
//     }

//     return (g_dpTable[totalDay - 1][0][0] + g_dpTable[totalDay - 1][0][1] + g_dpTable[totalDay - 1][0][2] + g_dpTable[totalDay - 1][1][0] + g_dpTable[totalDay - 1][1][1] + g_dpTable[totalDay - 1][1][2]) % MOD;
// }

// int checkRecord(int n)
// {
//     memset(g_dpTable, 0xf0, sizeof(g_dpTable));

//     return Dp(n);
// }

// ---------------------------解法 结束--------------------------------------------------------------------





// ---------------------------解法 开始-----动态规划 按顺序递推----另一种写法--------------------------------------------------
#define MOD 1000000007

#define MAX_DAYS 100001
#define A_NUM 2
#define L_LAST_NUM 3

long long g_dpTable[MAX_DAYS][A_NUM][L_LAST_NUM];

int Dp(int totalDay)
{
    // 第一天状态初始化
    g_dpTable[0][0][0] = 1;
    g_dpTable[0][0][1] = 1;
    g_dpTable[0][0][2] = 0;
    g_dpTable[0][1][0] = 1;
    g_dpTable[0][1][1] = 0;
    g_dpTable[0][1][2] = 0;


    /* 前一天的状态
    g_dpTable[day - 1][0][0]  一天都没有缺席，当前连续迟到数0
    g_dpTable[day - 1][0][1]  一天都没有缺席，当前连续迟到数1
    g_dpTable[day - 1][0][2]  一天都没有缺席，当前连续迟到数2
    g_dpTable[day - 1][1][0]  有一天缺席，当前连续迟到数0
    g_dpTable[day - 1][1][1]  有一天缺席，当前连续迟到数1
    g_dpTable[day - 1][1][2]  有一天缺席，当前连续迟到数2

        // 如果今天选择 P
        g_dpTable[day - 1][0][0]   ->  g_dpTable[day][0][0]
        g_dpTable[day - 1][0][1]   ->  g_dpTable[day][0][0]
        g_dpTable[day - 1][0][2]   ->  g_dpTable[day][0][0]
        g_dpTable[day - 1][1][0]   ->  g_dpTable[day][1][0]
        g_dpTable[day - 1][1][1]   ->  g_dpTable[day][1][0]
        g_dpTable[day - 1][1][2]   ->  g_dpTable[day][1][0]

        // 如果今天选择 L
        g_dpTable[day - 1][0][0]   ->  g_dpTable[day][0][1]
        g_dpTable[day - 1][0][1]   ->  g_dpTable[day][0][2]
        g_dpTable[day - 1][0][2]   ->  不可选
        g_dpTable[day - 1][1][0]   ->  g_dpTable[day][1][1]
        g_dpTable[day - 1][1][1]   ->  g_dpTable[day][1][2]
        g_dpTable[day - 1][1][2]   ->  不可选

        // 如果今天选择 A
        g_dpTable[day - 1][0][0]   ->  g_dpTable[day][1][0]
        g_dpTable[day - 1][0][1]   ->  g_dpTable[day][1][0]
        g_dpTable[day - 1][0][2]   ->  g_dpTable[day][1][0]
        g_dpTable[day - 1][1][0]   ->  不可选
        g_dpTable[day - 1][1][1]   ->  不可选
        g_dpTable[day - 1][1][2]   ->  不可选

    // 几天的状态
    g_dpTable[day - 1][0][0]  一天都没有缺席，当前连续迟到数0
    g_dpTable[day - 1][0][1]  一天都没有缺席，当前连续迟到数1
    g_dpTable[day - 1][0][2]  一天都没有缺席，当前连续迟到数2
    g_dpTable[day - 1][1][0]  有一天缺席，当前连续迟到数0
    g_dpTable[day - 1][1][1]  有一天缺席，当前连续迟到数1
    g_dpTable[day - 1][1][2]  有一天缺席，当前连续迟到数2

    状态转移就是这样，写法可以不同
    */

    for (int day = 1; day < totalDay; day++) {
        for (int aNum = 0; aNum < 2; aNum++) {
            for (int lNum = 0; lNum < 3; lNum++) {
                // 今天选P
                if (lNum == 0) {
                    g_dpTable[day][aNum][0] = (g_dpTable[day][aNum][0] + g_dpTable[day - 1][aNum][0] + g_dpTable[day - 1][aNum][1] + g_dpTable[day - 1][aNum][2]) % MOD;
                }
                // 今天选L
                if (lNum != 0) {
                    g_dpTable[day][aNum][lNum] = (g_dpTable[day][aNum][lNum] + g_dpTable[day - 1][aNum][lNum - 1]) % MOD;
                }
                // 今天选A
                if (aNum == 1 && lNum == 0) {
                    g_dpTable[day][aNum][0] = (g_dpTable[day][aNum][0] + g_dpTable[day - 1][aNum - 1][0] + g_dpTable[day - 1][aNum - 1][1] + g_dpTable[day - 1][aNum - 1][2]) % MOD;
                }
            }
        }
    }

    return (int)((g_dpTable[totalDay - 1][0][0] + g_dpTable[totalDay - 1][0][1] + g_dpTable[totalDay - 1][0][2] + g_dpTable[totalDay - 1][1][0] + g_dpTable[totalDay - 1][1][1] + g_dpTable[totalDay - 1][1][2]) % MOD);
}

int checkRecord(int n)
{
    memset(g_dpTable, 0, sizeof(g_dpTable));

    return Dp(n);
}

// ---------------------------解法 结束--------------------------------------------------------------------






// ---------------------------解法 开始-----贪心 ----------------------------------------------------------

// ---------------------------解法 结束-----------------------------------------------------------------------






int main()
{
    // int result_1 = checkRecord(1);
    // assert(result_1 == 3);

    int result_2 = checkRecord(2);
    assert(result_2 == 8);


    int result_3 = checkRecord(3);
    assert(result_3 == 19);

    int result_4 = checkRecord(4);
    assert(result_4 == 43);

    return 0;
}
