/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : leetcode 827. 最大人工岛. https://leetcode.cn/problems/making-a-large-island/
 * 作    者   :
 * 生成日期   :

 * 动态规划 
      --- 
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"





/*

*/

// ---------------------------解法 开始-----深度优先遍历-------------------------------------------------------

// #define MAX_ROW_LEN 500
// #define MAX_COL_LEN 500
// typedef enum DIRECTION {
//     DOWN = 0,
//     UP = 1,
//     RIGHT = 2,
//     LEFT = 3,
//     DIR_BUTT = 4
// } DIRECTION;


// int visit[MAX_ROW_LEN][MAX_COL_LEN];
// void printfVisitPath(int n, int m)
// {
//     for (int i  = 0; i < n; i++) {
//         for (int j  = 0; j < m; j++) {
//             printf("%-3d", visit[i][j]);
//         }
//         printf("\n");
//     }
//     printf("\n");
// }
// int board[MAX_ROW_LEN][MAX_COL_LEN];
// void printfBoard(int n, int m)
// {
//     for (int i  = 0; i < n; i++) {
//         for (int j  = 0; j < m; j++) {
//             printf("%-3d", board[i][j]);
//         }
//         printf("\n");
//     }
//     printf("\n");
// }



// int g_direct[DIR_BUTT][2] = {
//     { 1, 0 },
//     { -1, 0 },
//     { 0, 1 },
//     { 0, -1 }
// };


// typedef struct VisitAndVal {
//     int visit;
//     int val;
// } VisitAndVal;
// VisitAndVal visVal[MAX_ROW_LEN * MAX_ROW_LEN];
// bool valAdded[MAX_ROW_LEN * MAX_ROW_LEN];

// void DfsRecursive(int** grid, int gridSize, int* gridColSize, int vis, int row, int col, int *outRes)
// {
//     int sumPath = 0;
//     for (int dir = 0; dir < 4; dir++) {
//         int nextRow = row + g_direct[dir][0];
//         int nextCol = col + g_direct[dir][1];

//         if (nextRow >= 0 && nextRow < gridSize && nextCol >= 0 && nextCol < gridColSize[0]) {
//             if (grid[nextRow][nextCol] != 0 && visit[nextRow][nextCol] == 0) {
//                 visit[nextRow][nextCol] = vis;
//                 int temp = 1;
//                 DfsRecursive(grid, gridSize, gridColSize, vis, nextRow, nextCol, &temp);
//                 sumPath += temp;
//             } else if (grid[nextRow][nextCol] == 0) {
//                 board[nextRow][nextCol] = 1;
//             }
//         }
//     }

//     (*outRes) += sumPath;
// }

// int DfsVal(int** grid, int gridSize, int* gridColSize, int row, int col)
// {
//     int res = 1;
//     int connect[4] = { -1, -1, -1, -1};
//     memset(valAdded, 0, (size_t)sizeof(valAdded));
//     for (int dir = 0; dir < 4; dir++) {
//         int nextRow = row + g_direct[dir][0];
//         int nextCol = col + g_direct[dir][1];

//         if (nextRow >= 0 && nextRow < gridSize && nextCol >= 0 && nextCol < gridColSize[0] && visit[nextRow][nextCol] != 0 && grid[nextRow][nextCol] != 0) {
//             connect[dir] = visit[nextRow][nextCol];
//             res += ((valAdded[connect[dir]] == 1) ? 0: visVal[connect[dir]].val);
//             valAdded[connect[dir]] = 1;
//         }
//     }
//     return res;
// }

// int largestIsland(int** grid, int gridSize, int* gridColSize)
// {
//     memset(visit, 0, (size_t)sizeof(visit));
//     memset(board, 0, (size_t)sizeof(board));
//     memset(visVal, 0, (size_t)sizeof(visVal));
//     int visCnt = 1;

//     int res = 0;
//     for (int i = 0; i < gridSize; i++) {
//         for (int j = 0; j < gridColSize[0]; j++) {
//             if (grid[i][j] != 0 && visit[i][j] == 0) {
//                 visit[i][j] = visCnt;
//                 int temp = 1;
//                 DfsRecursive(grid, gridSize, gridColSize, visCnt, i, j, &temp);
//                 res = fmax(res, temp);
//                 visVal[visCnt].val = temp;
//                 visVal[visCnt].visit = visCnt;
//                 printfVisitPath(gridSize, gridColSize[0]);
//                 printfBoard(gridSize, gridColSize[0]);
//                 visCnt++;
//             }
//         }
//     }


//     for (int i = 0; i < gridSize; i++) {
//         for (int j = 0; j < gridColSize[0]; j++) {
//             if (board[i][j] == 1) {
//                 // 将 边界变为1
//                 int temp = DfsVal(grid, gridSize, gridColSize, i, j);
//                 res = fmax(res, temp);
//             }
//         }
//     }

//     return res;
// }
// ---------------------------解法 结束---------------------------------------------------------------------












// ---------------------------解法 开始-----深度优先遍历-------------------------------------------------------
#define MAX_ROW_LEN 500
#define MAX_COL_LEN 500
typedef enum DIRECTION {
    DOWN = 0,
    UP = 1,
    RIGHT = 2,
    LEFT = 3,
    DIR_BUTT = 4
} DIRECTION;



int g_direct[DIR_BUTT][2] = {
    { 1, 0 },
    { -1, 0 },
    { 0, 1 },
    { 0, -1 }
};


typedef struct VisitAndVal {
    int visit;
    int val;
} VisitAndVal;

int *visit;
int *board;
VisitAndVal *visVal;
bool *valAdded;
void printfVisitPath(int n, int m)
{
    for (int i  = 0; i < n; i++) {
        for (int j  = 0; j < m; j++) {
            printf("%-3d", visit[i * m + j]);
        }
        printf("\n");
    }
    printf("\n");
}
void printfBoard(int n, int m)
{
    for (int i  = 0; i < n; i++) {
        for (int j  = 0; j < m; j++) {
            printf("%-3d", board[i * m + j]);
        }
        printf("\n");
    }
    printf("\n");
}

void DfsRecursive(int** grid, int gridSize, int* gridColSize, int vis, int row, int col, int *outRes)
{
    int sumPath = 0;
    for (int dir = 0; dir < 4; dir++) {
        int nextRow = row + g_direct[dir][0];
        int nextCol = col + g_direct[dir][1];

        if (nextRow >= 0 && nextRow < gridSize && nextCol >= 0 && nextCol < gridColSize[0]) {
            if (grid[nextRow][nextCol] != 0 && visit[nextRow * gridColSize[0] + nextCol] == 0) {
                visit[nextRow * gridColSize[0] + nextCol] = vis;
                int temp = 1;
                DfsRecursive(grid, gridSize, gridColSize, vis, nextRow, nextCol, &temp);
                sumPath += temp;
            } else if (grid[nextRow][nextCol] == 0) {
                board[nextRow * gridColSize[0] + nextCol] = 1;
            }
        }
    }

    (*outRes) += sumPath;
}

int DfsVal(int** grid, int gridSize, int* gridColSize, int row, int col)
{
    int res = 1;
    int connect[4] = { -1, -1, -1, -1};
    memset(valAdded, 0, (size_t)sizeof(bool) * (gridSize * gridColSize[0] + 1));
    for (int dir = 0; dir < 4; dir++) {
        int nextRow = row + g_direct[dir][0];
        int nextCol = col + g_direct[dir][1];

        if (nextRow >= 0 && nextRow < gridSize && nextCol >= 0 && nextCol < gridColSize[0] && visit[nextRow * gridColSize[0] + nextCol] != 0 && grid[nextRow][nextCol] != 0) {
            connect[dir] = visit[nextRow * gridColSize[0] + nextCol];
            res += ((valAdded[connect[dir]] == 1) ? 0: visVal[connect[dir]].val);
            valAdded[connect[dir]] = 1;
        }
    }
    return res;
}

int largestIsland(int** grid, int gridSize, int* gridColSize)
{
    int size = gridSize * gridColSize[0];

    visit = (int *)malloc(sizeof(int) * size);
    memset(visit, 0, (size_t)sizeof(int) * size);

    board = (int *)malloc(sizeof(int) * size);
    memset(board, 0, (size_t)sizeof(int) * size);

    visVal = (VisitAndVal *)malloc(sizeof(VisitAndVal) * (size + 1));
    memset(visVal, 0, (size_t)sizeof(VisitAndVal) * (size + 1));

    valAdded = (bool *)malloc(sizeof(bool) * (size + 1));


    int visCnt = 1;

    int res = 1;
    for (int i = 0; i < gridSize; i++) {
        for (int j = 0; j < gridColSize[0]; j++) {
            if (grid[i][j] != 0 && visit[i * gridColSize[0] + j] == 0) {
                visit[i * gridColSize[0] + j] = visCnt;
                int temp = 1;
                DfsRecursive(grid, gridSize, gridColSize, visCnt, i, j, &temp);
                res = fmax(res, temp);
                visVal[visCnt].val = temp;
                visVal[visCnt].visit = visCnt;
                visCnt++;

                printfVisitPath(gridSize, gridColSize[0]);
                printfBoard(gridSize, gridColSize[0]);
            }
        }
    }


    for (int i = 0; i < gridSize; i++) {
        for (int j = 0; j < gridColSize[0]; j++) {
            if (board[i * gridColSize[0] + j] == 1) {
                // 将 边界变为1
                int temp = DfsVal(grid, gridSize, gridColSize, i, j);
                res = fmax(res, temp);
            }
        }
    }

    free(visit);
    free(board);
    free(visVal);
    free(valAdded);
    visit = NULL;
    board = NULL;
    visVal = NULL;
    valAdded = NULL;
    return res;
}
// ---------------------------解法 结束---------------------------------------------------------------------















#define MAX_LEN 201

typedef struct Matrix {
    int matrixSize;
    int matrixColSize[MAX_LEN];
    int matrix[MAX_LEN][MAX_LEN];
    int* matrixPoin[MAX_LEN];
} Matrix;

void printfMatrix(int a[][MAX_LEN], int n, int m)
{
    for (int i  = 0; i < n; i++) {
        for (int j  = 0; j < m; j++) {
            printf("%-10d", a[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}


int main(int argc, const char *argv[])
{
    Matrix matrix_1 = {
        8,
        { 13, 13, 13, 13, 13, 13, 13, 13 },
        {
            { 0,0,1,0,0,0,0,1,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,1,1,1,0,0,0 },
            { 0,1,1,0,1,0,0,0,0,0,0,0,0 },
            { 0,1,0,0,1,1,0,0,1,0,1,0,0 },
            { 0,1,0,0,1,1,0,0,1,1,1,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,1,0,0 },
            { 0,0,0,0,0,0,0,1,1,1,0,0,0 },
            { 0,0,0,0,0,0,0,1,1,0,0,0,0 },

        }
    };
    for (int i = 0; i < matrix_1.matrixSize; i++) {
        matrix_1.matrixPoin[i] = &matrix_1.matrix[i][0];
    }
    printfMatrix(matrix_1.matrix, matrix_1.matrixSize, matrix_1.matrixColSize[0]);
    int res_1 = largestIsland(matrix_1.matrixPoin, matrix_1.matrixSize, matrix_1.matrixColSize);
    assert(res_1 == 12);


    return 0;
}




// int main() {
// 	int gradCharData_1[8][13] = {
// 		{0,0,1,0,0,0,0,1,0,0,0,0,0},
// 		{0,0,0,0,0,0,0,1,1,1,0,0,0},
// 		{0,1,1,0,1,0,0,0,0,0,0,0,0},
// 		{0,1,0,0,1,1,0,0,1,0,1,0,0},
// 		{0,1,0,0,1,1,0,0,1,1,1,0,0},
// 		{0,0,0,0,0,0,0,0,0,0,1,0,0},
// 		{0,0,0,0,0,0,0,1,1,1,0,0,0},
// 		{0,0,0,0,0,0,0,1,1,0,0,0,0}
// 	};
// 	int row_1 = 8;
// 	int cloum_1 = 13;
// 	int *gradRowPointer_1[row_1];
//     for (int i = 0; i < row_1; i++) {
// 		gradRowPointer_1[i] = &gradCharData_1[i][0];
// 	}
// 	int result_1 = maxAreaOfIsland(gradRowPointer_1, row_1, &cloum_1);
//     assert(result_1 == 6);


// 	// 整数数组不能这样创建，只能这样创建字符串
// 	// int *gradRowPointer_2[] = {
// 	// 	{0,0,1,0,0,0,0,1,0,0,0,0,0},
// 	// 	{0,0,0,0,0,0,0,1,1,1,0,0,0},
// 	// 	{0,1,1,0,1,0,0,0,0,0,0,0,0},
// 	// 	{0,1,0,0,1,1,0,0,1,0,1,0,0},
// 	// 	{0,1,0,0,1,1,0,0,1,1,1,0,0},
// 	// 	{0,0,0,0,0,0,0,0,0,0,1,0,0},
// 	// 	{0,0,0,0,0,0,0,1,1,1,0,0,0},
// 	// 	{0,0,0,0,0,0,0,1,1,0,0,0,0}
// 	// };
// 	// int row_2 = 8;
// 	// int cloum_2 = 13;
// 	// int result_2 = maxAreaOfIsland(gradRowPointer_2, row_2, &cloum_2);
//     // assert(result_2 == 6);


// 	return 0;
// }
