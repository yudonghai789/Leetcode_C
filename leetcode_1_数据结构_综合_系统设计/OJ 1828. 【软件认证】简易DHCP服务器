/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : OJ 1828. 【软件认证】简易DHCP服务器. https://oj.rnd.huawei.com/problems/1828/details
 * 作    者   :
 * 生成日期   :

 * 
      --- 
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <limits.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
#include "securec.h"
#include "vos_priorityqueue.h"
#include "vos_list.h"





/*
题目描述
DHCP服务器的功能是为每一个MAC地址分配唯一的IP地址。现假设：分配的IP地址范围从 192.168.0.0 到 192.168.0.255 总共256个可用地址（以点分十进制表示）。请实现一个简易的DHCP服务器，功能如下：

分配Request：根据输入的MAC地址分配IP地址池中的IP地址：
如果对应的IP已分配并未释放，则为重复申请，直接返回对应已分配的IP地址。
如果一个MAC地址已申请过并已释放，即：当前未分配IP地址，则为再申请，优先分配最近一次曾经为其分配过的IP地址，请返回此地址。
按升序分配从未被分配过的IP地址；如果地址池中地址都已被分配过，则按升序分配已释放出来的IP地址；若可分配成功，则返回此IP地址。
若仍然无法分配成功，则返回NA。
释放Release：根据输入的MAC地址释放已分配的IP地址：
如果申请释放的对应的IP地址已分配，则释放此IP地址；
如果申请释放的对应的IP地址不存在，则不作任何事情；
解答要求
时间限制：1000ms, 内存限制：64MB
输入
首行为整数n, 表示其后输入的命令行数，范围[1,2000]。
之后每行为一条分配命令，格式为：命令=MAC地址

命令只有两种：REQUEST 和 RELEASE，分别表示分配和释放；
MAC地址为：12个大写英文字母或数字，如：AABBCCDDEEF1。
输出
1.REQUEST命令，输出分配结果(IP地址字符串或字符串NA)，均为字符串形式。

注意：IP地址的各区段不设置前置 0

2.RELEASE命令，不输出任何内容。

样例
输入样例 1 复制

2
REQUEST=AABBCCDDEEF1
RELEASE=AABBCCDDEEF1
输出样例 1

192.168.0.0
提示样例 1
REQUEST=AABBCCDDEEF1 按升序分配从未使用过的IP地址，输出192.168.0.0
RELEASE=AABBCCDDEEF1 不输出



输入样例 2 复制

6
REQUEST=AABBCCDDEEF1
REQUEST=F2FBBCCDDEEF
RELEASE=AABBCCDDEEF1
RELEASE=F2FBBCCDDEEF
REQUEST=333333333333
REQUEST=F2FBBCCDDEEF
输出样例 2

192.168.0.0
192.168.0.1
192.168.0.2
192.168.0.1
提示样例 2
REQUEST=AABBCCDDEEF1 按升序分配从未使用过的IP，为192.168.0.0
REQUEST=F2FBBCCDDEEF 按升序分配从未使用过的IP，为192.168.0.1
RELEASE=AABBCCDDEEF1 释放IP 192.168.0.0。
RELEASE=F2FBBCCDDEEF 释放IP 192.168.0.1。
REQUEST=333333333333 按升序分配从未使用过的IP，为192.168.0.2
REQUEST=F2FBBCCDDEEF 该MAC地址再申请，优先分配最近一次曾经为其分配过的IP，为192.168.0.1
*/




// ---------------------------解法 ----系统设计---哈希 链表------------------------------------------
/*
    对于所有的Ip信息，平时需要根据 ip大小顺序排序，找到还没有被分配出去的最小的ip
    而特殊的分配方式在于有时需要将 特定的ip分配给的特定MAC
*/

#define BUF_LEN 32
#define MAC_LEN 20
#define IP_LEN 16
#define MAX_REPE 100

typedef struct IpInfo {
    char ip[IP_LEN];
    int val;
    int usedStatus; // 看是否被分配出去, 0 未分配 1使用中 2 分配后释放了
} IpInfo;

typedef struct AllIpStatus {
    IpInfo ip[256];
    int usedIp; // 被占用的ip
} AllIpStatus;
AllIpStatus g_allIp = { 0 };

int CalIpVal(char *ip)
{
    return atoi(&ip[10]);
}

IpInfo* IpRequest()
{
    if (g_allIp.usedIp == 256) {
        for (int i = 0; i < 256; i++) {
            if (g_allIp.ip[i].usedStatus == 2) {
                g_allIp.ip[i].usedStatus = 1;
                return &g_allIp.ip[i];
            }
        }
    } else {
        for (int i = 0; i < 256; i++) {
            if (g_allIp.ip[i].usedStatus == 0) {
                g_allIp.ip[i].usedStatus = 1;
                g_allIp.usedIp++;
                return &g_allIp.ip[i];
            }
        }
    }

    printf("error\n");
    return NULL;
}


// 维护每一个MAC的ip信息队列

typedef struct UthshCharArray {
    char key[MAC_LEN]; // MAC地址
    bool hasIp;
    IpInfo *usingIp;

    int top;
    IpInfo* usedIpStack[MAX_REPE];
    UT_hash_handle hh;
} UthshCharArray;
UthshCharArray *g_UthshHead = NULL;


UthshCharArray* UthshFindByKey(UthshCharArray **UthshHead, char ikey[IP_LEN])
{
    UthshCharArray *temp = NULL;
    HASH_FIND_STR(*UthshHead, ikey, temp);
    return temp;
}

void TuhashDeleteAll(UthshCharArray** hashtableHead) {
   UthshCharArray *current_user, *tmp;

   HASH_ITER(hh, *hashtableHead, current_user, tmp) {
       HASH_DEL(*hashtableHead, current_user);  /* delete it (users advances to next) */
       free(current_user);             /* free it */
   }
}

/* 
 * 请在 out/outLen 字符串缓存中输出分配结果(IP地址或NA) 
 * 框架自动补上换行符，考生不用添加
 */
void Request(const char *mac, char *out, int outLen)
{
    char macName[MAC_LEN] = { 0 };
    strcpy(macName, mac);
    size_t maxout = (size_t)sizeof(char) * outLen;
    memset_s(out, maxout, 0, maxout);

    UthshCharArray *temp = UthshFindByKey(&g_UthshHead, macName);
    if (temp == NULL) {
        temp = (UthshCharArray *)malloc(sizeof(UthshCharArray));
        memset(temp, 0, sizeof(UthshCharArray));
        strcpy(temp->key, macName);
        temp->top = -1;
        IpInfo *data = IpRequest();
        if (data == NULL) {
            sprintf_s(out, maxout, "NA");
        } else {
            temp->hasIp = true;
            temp->usingIp = data;
            HASH_ADD_STR(g_UthshHead, key, temp);
            sprintf_s(out, maxout, "%s", temp->usingIp);
        }
    } else {
        if (temp->hasIp == true) {
            sprintf_s(out, maxout, "%s", temp->usingIp);
        } else {
            for (int i = temp->top; i >= 0; i--) {
                if (temp->usedIpStack[i]->usedStatus == 2) {
                    temp->usedIpStack[i]->usedStatus = 1;
                    sprintf_s(out, maxout, "%s", temp->usedIpStack[i]);
                    temp->hasIp = true;
                    temp->usingIp = temp->usedIpStack[i];
                    return;
                }
            }

            IpInfo *data = IpRequest();
            if (data == NULL) {
                sprintf_s(out, maxout, "NA");
            } else {
                temp->hasIp = true;
                temp->usingIp = data;
                sprintf_s(out, maxout, "%s", temp->usingIp);
            }
        }
    }
}

void Release(const char *mac)
{
    char macName[MAC_LEN] = { 0 };
    strcpy(macName, mac);
    UthshCharArray *temp = UthshFindByKey(&g_UthshHead, macName);
    if (temp != NULL && temp->hasIp == true) {
        temp->usedIpStack[++temp->top] = temp->usingIp;
        temp->usingIp->usedStatus = 2;
        temp->hasIp = false;
        temp->usingIp = NULL;
    }
}

// 代码仅供参考，注意避免圈复杂度过大
int main(void)
{
    for (int i = 0; i < 256; i++) {
        g_allIp.ip[i].val = i;
        sprintf_s(g_allIp.ip[i].ip, IP_LEN, "192.168.0.%d", i);
        g_allIp.ip[i].usedStatus = 0;
    }
    g_allIp.usedIp = 0;

    int n;
    if (scanf_s("%d", &n) != 1) { return -1; }

    static char input[BUF_LEN];
    static char output[BUF_LEN];
    int i;
    for (i = 0; i < n; i++) {
        if (scanf_s("%s", input, sizeof(input)) != 1) { return -1; }
        if (input[2] == 'Q') { // REQUEST
            Request(&input[8], output, sizeof(output));
            (void)printf("%s\n", output);
        } else { // RELEASE
            Release(&input[8]);
        }
    }

    TuhashDeleteAll(&g_UthshHead);
    g_UthshHead = NULL;
    return 0;
}
// ---------------------------解法 结束---------------------------------------------------------------------
