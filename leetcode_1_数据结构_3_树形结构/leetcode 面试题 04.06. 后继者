/******************************************************************************
* 版权所有 (c) 
* 功能描述   : leetcode 面试题 04.06. 后继者   https://leetcode.cn/problems/successor-lcci/
* 作    者   : 
* 生成日期   : 
******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"









// ---------------------------解法 开始---二叉树-中序遍历----------------------------------------------
// void recursionMiddleorderTraversal(struct TreeNode* root, struct TreeNode* p, int *cnt, struct TreeNode** res)
// {
//     if (root != NULL) {
//         recursionMiddleorderTraversal(root->left, p, cnt, res);

//         //printf("%d  " , root->val);

//         if ((*cnt) == 0) {
//             *res = root;
//             (*cnt) = 0xff;
//             return;
//         }

//         if (root->val == p->val && (*cnt == 1)) {
//             *cnt = 0;
//         }

//         recursionMiddleorderTraversal(root->right, p, cnt, res);
//     }
// }

// struct TreeNode* inorderSuccessor(struct TreeNode* root, struct TreeNode* p)
// {
//     struct TreeNode* res = NULL;
//     int cnt = 1;
//     recursionMiddleorderTraversal(root, p, &cnt, &res);
//     return res;
// }
// ---------------------------解法 开始---二叉树-中序遍历----------------------------------------------



// ---------------------------解法 开始---二叉树-中序遍历----------------------------------------------

typedef struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
} TreeNode;


#define MAX_STACK_DEPP 100
typedef struct StackTree {
    int top;
    struct TreeNode *node[MAX_STACK_DEPP];
} StackTree;

void MiddleorderTraversal(struct TreeNode* root, struct TreeNode* p, int *cnt, struct TreeNode** res)
{
    StackTree stack = { 0 };
    stack.top = -1;
    struct TreeNode* pNode = root;
    while (pNode != NULL || stack.top != -1) {
        if (pNode != NULL) {
            stack.node[++stack.top] = pNode;
            pNode = pNode->left;
        } else {
            struct TreeNode* node = stack.node[stack.top--];
            if ((*cnt) == 0) {
                *res = node;
                (*cnt)= 0xff;
                return;
            }

            if (node->val == p->val && (*cnt == 1)) {
                *cnt = 0;
            }
            pNode = node->right;
        }
    }
}

struct TreeNode* inorderSuccessor(struct TreeNode* root, struct TreeNode* p)
{
    struct TreeNode* res = NULL;
    int cnt = 1;
    MiddleorderTraversal(root, p, &cnt, &res);
    return res;
}
// ---------------------------解法 结束---------------------------------------------------------------------











struct TreeNodeWapper {
    int thisValue;
    int val;
    struct TreeNodeWapper *left;
    struct TreeNodeWapper *right;
};

void freeTreeNodeWapper(struct TreeNodeWapper* treeRoot) {
    if(treeRoot == NULL) {return;}
    
    freeTreeNodeWapper(treeRoot->left);
    freeTreeNodeWapper(treeRoot->right);
    
    free(treeRoot);
}

struct TreeNodeWapper* WapperTree(struct TreeNode* root) {
    if (root == NULL) { return NULL; }
    struct TreeNodeWapper* treeNodeWapper = (struct TreeNodeWapper*)malloc(sizeof(struct TreeNodeWapper));
    treeNodeWapper->thisValue = 0x5a5a5a5a;
    treeNodeWapper->val = root->val;
    treeNodeWapper->left = WapperTree(root->left);
    treeNodeWapper->right = WapperTree(root->right);
    return treeNodeWapper;
}



char** stringToStringArray(char* string, const char *delim, int *size) {
    // 获取返回的字符串数组长度
    if (string != NULL) { *size = 1; } else {return NULL;}
    for(int i = 0; i < strlen(string); i++){       
        if (string[i] == delim[0]) {       
            (*size)++;
        }
    }

    char **retArray = (char **)malloc(sizeof(char*) * (*size));

    /* 获取第一个子字符串 */
    int i = 0;
    char* token;
    token = strtok(string, delim);
    retArray[i] = (char *)malloc(sizeof(char) * 10);
    memset((void*)retArray[i], 0, sizeof(char) * 10);
    memcpy(retArray[i], token, strlen(token));
   
    /* 继续获取其他的子字符串 */
    while((token != NULL) && (i < (*size) - 1)) {
        printf( "%s\n", token );
        token = strtok(NULL, delim);
        retArray[++i] = (char *)malloc(sizeof(char) * 10);
        memset((void*)retArray[i], 0, sizeof(char) * 10);
        memcpy(retArray[i], token, strlen(token));
   }
    printf( "%s\n", token );
    return retArray;
}

// 层序遍历 + 非空判断 添加节点
struct TreeNode* CaseToTree(char** charArray, int count) {
    if (count == 0) { return NULL; }

    struct TreeNode* treeRoot = (struct TreeNode*)malloc(sizeof(struct TreeNode) * count);
    memset((void*)treeRoot, 0, sizeof(struct TreeNode) * count);

    for (int i = 0; i < count; i++) {
        if (strcmp(charArray[i], "null") == 0) {
            treeRoot[i].val = 0x5a5a5a5a;
        } else {
            treeRoot[i].val = atoi(charArray[i]);
        }
    }

    int order = 0, useer = 1; 
    while (order <= useer) {
        if (treeRoot[order].val != 0x5a5a5a5a) {
            // 添加左节点 
            if (useer < count) {
                if (treeRoot[useer].val != 0x5a5a5a5a) {
                    treeRoot[order].left = &treeRoot[useer];
                }
                ++useer;
            }
            // 添加右节点 
            if (useer < count) {
                if (treeRoot[useer].val != 0x5a5a5a5a) {
                    treeRoot[order].right = &treeRoot[useer]; 
                }
                ++useer;
            }
        }
        order++;
    }

    return treeRoot;
}



int main(void)
{
    char case_1_string[] = {"2,null,3"};
    int count_1 = 0;
    char** case_1 = stringToStringArray(case_1_string, ",", &count_1);
    struct TreeNode* treeRoot_1 = (struct TreeNode*)CaseToTree(case_1, count_1);
    struct TreeNode p_1 = { 2, NULL, NULL };
    struct TreeNode* result_1 = inorderSuccessor(treeRoot_1, &p_1);
    // freeTreeNode(treeRoot_1);  // 不连续申请的内存，递归释放
    free(treeRoot_1); // 连续申请的内存

    return 0;
}


