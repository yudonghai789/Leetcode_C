/******************************************************************************
* 版权所有 (c) 
* 功能描述   : 经典排序  -- 二维数组。二维数组排序有一个技巧，就是的排序一维数组指针数组
* 作    者   : 
* 生成日期   : 
******************************************************************************/
#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
#include <math.h>




/* --------------------------------------------------------------------------------------------------------------------------------------------------- *
 *                  -- 宏定义 --                *
 * ---------------------------------------------------------------------------------------------------------------------------------------------------- */



/* ----------------------------------------------------------------------------------------------------------------------------------------------------- *
 *                -- 数据结构的基本定义-- *
 * ----------------------------------------------------------------------------------------------------------------------------------------------------- */


/* ------------------------------------------------------------------------------------------------------------------------------------------------------------- *
 *                -- 对外函数接口 --                *
 * ------------------------------------------------------------------------------------------------------------------------------------------------------------- */


/* ------------------------------------------------------------------------------------------------------------------------------------------------------------ *
 *                -- 工具小函数 --                *
 * ------------------------------------------------------------------------------------------------------------------------------------------------------------ */


/*
 * 交换数组中两个数据的位置
 */


/*
 * 
 */

/*
 * 
 */


/* ------------------------------------------------------------------------------------------------------------------------------------------------------------ *
 *                -- 排序算法 --                
 * 冒泡排序  选择排序  插入排序  希尔排序  归并排序 快速排序 堆排序 计数排序 桶排序 基数排序
 * ------------------------------------------------------------------------------------------------------------------------------------------------------------ */



/*****************************************************************************
 * 描  述: 冒泡排序（Bubble Sort）
*****************************************************************************/


/*****************************************************************************
 * 描  述: 选择排序
*****************************************************************************/



/*****************************************************************************
 * 描  述: 插入排序（Insertion Sort)
*****************************************************************************/


/*****************************************************************************
 * 描  述: 希尔排序（Shell Sort
*****************************************************************************/



/*****************************************************************************
 * 描  述: 归并排序（Merge Sort）
*****************************************************************************/


/*****************************************************************************
 * 描  述: 堆排序（Heap Sort）
*****************************************************************************/

/*****************************************************************************
 * 描  述: 快速排序
*****************************************************************************/
int cmp(const void *a, const void *b) {
    int** aVal = (int**)a;
    int** bVal = (int**)b;
    return (*aVal)[1] - (*bVal)[1];
}

void QuickSort(int** intervals, int intervalsSize, int* intervalsColSize) {
    if (intervalsSize == 0) {
        return ;
    }

    qsort(intervals, intervalsSize, sizeof(int*), cmp);
}



/*****************************************************************************
 * 描  述: 计数排序（Counting Sort）
*****************************************************************************/





/*****************************************************************************
 * 描  述: 桶排序（Bucket Sort）
*****************************************************************************/


/*****************************************************************************
 * 描  述: 基数排序（Radix Sort）
*****************************************************************************/




int main() {
    int intervals_1[4][2] = {{1, 2}, {2, 3}, {3, 4}, {1, 3}};
    int intervalsSize_1 = 4;
    int intervalsColSize_1[4] = {2, 2, 2, 2};
    int *intervalsPointer_1[4] = {0};
    for (int i = 0; i < intervalsSize_1; i++) {
        intervalsPointer_1[i] = &intervals_1[i][0];
    }
    QuickSort(intervalsPointer_1, intervalsSize_1, intervalsColSize_1);

    

    int intervals_2[4][2] = {{1, 100}, {11, 22}, {1, 11}, {2, 12}};
    int intervalsSize_2 = 4;
    int intervalsColSize_2[4] = {2, 2, 2, 2};
    int *intervalsPointer_2[4] = {0};
    for (int i = 0; i < intervalsSize_2; i++) {
        intervalsPointer_2[i] = &intervals_2[i][0];
    }
    QuickSort(intervalsPointer_2, intervalsSize_2, intervalsColSize_2);


    return 0;


    return 0;
}
