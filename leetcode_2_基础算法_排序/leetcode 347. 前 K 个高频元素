/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : leetcode 347. 前 K 个高频元素 https://leetcode-cn.com/problems/top-k-frequent-elements/
 * 作    者   :
 * 生成日期   :
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"


// ---------------------------开始-------------------------------------------------------------
#define MAX_ARRANCG 100
int g_reFreq[MAX_ARRANCG];
int g_deFreq[MAX_ARRANCG];

int CompareFrq(const void *a, const void *b)
{
    int A = *(int *)a;
    int B = *(int *)b;

    int freA = (A >= 0) ? g_reFreq[A]: g_deFreq[-A];
    int freB = (B >= 0) ? g_reFreq[B]: g_deFreq[-B];

    if (freA != freB) {
        return freA < freB;
    } else {
        return A > B;
    }
}

int* topKFrequent(int* nums, int numsSize, int k, int* returnSize)
{
    int* res = (int *)malloc(sizeof(int) * k);
    memset(res, 0, sizeof(int) * k);

    // if (numsSize == 1) {
    //     *returnSize = 1;
    //     res[0] = nums[0];
    //     return nums;
    // }

    memset(g_reFreq, 0, sizeof(int) * MAX_ARRANCG);
    memset(g_deFreq, 0, sizeof(int) * MAX_ARRANCG);


    for (int i = 0; i < numsSize; i++) {
        if (nums[i] >= 0) {
            g_reFreq[nums[i]]++;
        } else {
            g_deFreq[-nums[i]]++;
        }
    }

    qsort(nums, numsSize, sizeof(int), CompareFrq);

    *returnSize = 0;
    res[(*returnSize)] = nums[0];
    (*returnSize)++;
    for (int i = 1; i < numsSize; i++) {
        if (nums[i] != nums[i-1]) {
            res[(*returnSize)] = nums[i];
            (*returnSize)++;
        }
        if ((*returnSize) == k) {
            break;
        }
    }
    
    return res;
}
// ---------------------------结束--------------------------------------------------------------------




int main()
{
    int nums_1[] = { 3,2,3,1,2,4,5,5,6,7,7,8,2,3,1,1,1,10,11,5,6,2,4,7,8,5,6 };
    int numsSize_1 = sizeof(nums_1) / sizeof(nums_1[0]);
    int k_1 = 10;
    int returnSize_1 = 4564546;
    topKFrequent(nums_1, numsSize_1, k_1, &returnSize_1);


    return 0;
}
