/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : leetcode 462. 最少移动次数使数组元素相等 II. https://leetcode.cn/problems/minimum-moves-to-equal-array-elements-ii/
 * 作    者   :
 * 生成日期   :

 * 动态规划 
      --- 
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"






// ---------------------------解法 开始-----贪心 -- 数学-------------------------------------------------------
/*
提示一
    两个数  2  99， 只要将所有的元素都调整到 2~99中任意一个数，步数都是最小的，步数为  99 -2
    三个数  2  6 99  将数移动到6 的步数是最小的，步数为  99 - 2
提示二
    三个数以上：
       偶数情况下， 在所以数的中间
       奇数情况下， 中间的数

*/


int CompareInt(const void *a, const void *b)
{
    int intA = *(int *)a;
    int intB = *(int *)b;

    return intA - intB;
}

int minMoves2(int* nums, int numsSize){
    qsort(nums, numsSize, sizeof(int), CompareInt);
    int left = 0, right = numsSize - 1;
    int ans = 0;
    while(left < right) {
        ans += nums[right] - nums[left];
        ++left;
        --right;
    }
    return ans;
}
// ---------------------------解法 结束---------------------------------------------------------------------



















// ---------------------------解法 开始-----归并排序后取下标-------------------------------------------------------




// ---------------------------解法 结束---------------------------------------------------------------------






#define MAX_LEN 201

typedef struct Matrix {
    int matrixSize;
    int matrixColSize[MAX_LEN];
    int matrix[MAX_LEN][MAX_LEN];
    int* matrixPoin[MAX_LEN];
} Matrix;

void printfMatrix(int a[][MAX_LEN], int n, int m)
{
    for (int i  = 0; i < n; i++) {
        for (int j  = 0; j < m; j++) {
            printf("%-10d", a[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}


int main(int argc, const char *argv[])
{
    Matrix matrix_1 = {
        1,
        { 4 },
        {
            { 1,10,2,9 }

        }
    };
    for (int i = 0; i < matrix_1.matrixSize; i++) {
        matrix_1.matrixPoin[i] = &matrix_1.matrix[i][0];
    }
    printfMatrix(matrix_1.matrix, matrix_1.matrixSize, matrix_1.matrixColSize[0]);
    int res_1 = minMoves2(matrix_1.matrixPoin[0], matrix_1.matrixColSize[0]);
    assert(res_1 == 13);


    return 0;
}




// int main() {
// 	int gradCharData_1[8][13] = {
// 		{0,0,1,0,0,0,0,1,0,0,0,0,0},
// 		{0,0,0,0,0,0,0,1,1,1,0,0,0},
// 		{0,1,1,0,1,0,0,0,0,0,0,0,0},
// 		{0,1,0,0,1,1,0,0,1,0,1,0,0},
// 		{0,1,0,0,1,1,0,0,1,1,1,0,0},
// 		{0,0,0,0,0,0,0,0,0,0,1,0,0},
// 		{0,0,0,0,0,0,0,1,1,1,0,0,0},
// 		{0,0,0,0,0,0,0,1,1,0,0,0,0}
// 	};
// 	int row_1 = 8;
// 	int cloum_1 = 13;
// 	int *gradRowPointer_1[row_1];
//     for (int i = 0; i < row_1; i++) {
// 		gradRowPointer_1[i] = &gradCharData_1[i][0];
// 	}
// 	int result_1 = maxAreaOfIsland(gradRowPointer_1, row_1, &cloum_1);
//     assert(result_1 == 6);


// 	// 整数数组不能这样创建，只能这样创建字符串
// 	// int *gradRowPointer_2[] = {
// 	// 	{0,0,1,0,0,0,0,1,0,0,0,0,0},
// 	// 	{0,0,0,0,0,0,0,1,1,1,0,0,0},
// 	// 	{0,1,1,0,1,0,0,0,0,0,0,0,0},
// 	// 	{0,1,0,0,1,1,0,0,1,0,1,0,0},
// 	// 	{0,1,0,0,1,1,0,0,1,1,1,0,0},
// 	// 	{0,0,0,0,0,0,0,0,0,0,1,0,0},
// 	// 	{0,0,0,0,0,0,0,1,1,1,0,0,0},
// 	// 	{0,0,0,0,0,0,0,1,1,0,0,0,0}
// 	// };
// 	// int row_2 = 8;
// 	// int cloum_2 = 13;
// 	// int result_2 = maxAreaOfIsland(gradRowPointer_2, row_2, &cloum_2);
//     // assert(result_2 == 6);


// 	return 0;
// }
