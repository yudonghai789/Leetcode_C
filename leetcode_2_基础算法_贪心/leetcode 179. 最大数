/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : leetcode 179. 最大数   https://leetcode-cn.com/problems/largest-number/
 * 作    者   :
 * 生成日期   :

 *  
      --- 
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"





/*
179. 最大数
给定一组非负整数 nums，重新排列每个数的顺序（每个数不可拆分）使之组成一个最大的整数。

注意：输出结果可能非常大，所以你需要返回一个字符串而不是整数。

 

示例 1：

输入：nums = [10,2]
输出："210"
示例 2：

输入：nums = [3,30,34,5,9]
输出："9534330"
 

提示：

1 <= nums.length <= 100
0 <= nums[i] <= 109
*/





// ---------------------------解法 开始-----暴力遍历: -----------------------------------------------------

// ---------------------------解法 结束---------------------------------------------------------------------







// ---------------------------解法 开始-----BFS 递归模板: -----------------------------------------------------

// ---------------------------解法 结束---------------------------------------------------------------------











// ---------------------------解法 开始-----BFS 迭代模板: -----------------------------------------------------

// ---------------------------解法 结束-----------------------------------------------------------------------










// ---------------------------解法 开始-----DFS 递归模板: --------------结果不能重复的问题--------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------











// ---------------------------解法 开始-----DFS 迭代模板: --------------------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------











// ---------------------------解法 开始-----动态规划 记忆化搜索: ----memTable一定要注意表达 可以表达唯一结果的递归路径,维度不够时，不同结果的的递归路径被误当做相同的路径，维度太多时，剪枝效果不大------------------

// ---------------------------解法 结束----------------------------------------------------------------------







// ---------------------------解法 开始-----动态规划 按顺序递推-----------------------------------------------------

// ---------------------------解法 结束--------------------------------------------------------------------










// ---------------------------解法 开始-----贪心 ---------------------这个解答是错误的   3,30,34,5,9 --9534330 在 34 与3之间选择错了--------------------------------------
#define MAX_STRING_LEN 11
#define MAX_ARRAY_LEN 101
#define MAX_RES_LEN MAX_STRING_LEN * MAX_ARRAY_LEN


void MyItoa(int inter, char string[])
{
    char temp[11] = { 0 };
    temp[0] = inter % 10 + '0';
    int weiSu = 1;
    while (inter / 10) {
        inter = inter / 10;
        temp[weiSu++] = inter % 10 + '0';
    }

    int i = 0;
    while (weiSu > 0) {
        string[i++] = temp[--weiSu];
    }
}

unsigned long long MyAtoI(char string[])
{
    int len = strlen(string);

    unsigned long long res = 0;
    for (int i = 0; i < len; i++) {
        res = res * 10 + (string[i] - '0');
    }

    return res;
}


typedef struct ArrayInfo {
    int val;
    char string[MAX_STRING_LEN];
    int charlen;
} ArrayInfo;

ArrayInfo info[MAX_ARRAY_LEN];


int ComStruct(const void *a, const void *b)
{
    ArrayInfo *InfoA = (ArrayInfo *)a;
    ArrayInfo *InfoB = (ArrayInfo *)b;

    char temp1[22] = { 0 };
    strcat(temp1, InfoA->string);
    strcat(temp1, InfoB->string);


    char temp2[22] = { 0 };
    strcat(temp2, InfoB->string);
    strcat(temp2, InfoA->string);

    return MyAtoI(temp1) < MyAtoI(temp2);
}

char * largestNumber(int* nums, int numsSize)
{
    char *res = (char *)malloc(sizeof(char) * MAX_RES_LEN);
    memset(res, 0, sizeof(char) * MAX_RES_LEN);

    // special case
    if (numsSize == 1) {
        MyItoa(nums[0], res);
        return res;
    }


    memset(info, 0, sizeof(info));
    for (int i = 0; i < numsSize; i++) {
        info[i].val = nums[i];
        MyItoa(nums[i], &info[i].string[0]);
        info[i].charlen = strlen(info[i].string);
    }

    qsort(info, numsSize, sizeof(ArrayInfo), ComStruct);

    for (int i = 0; i < numsSize; i++) {
        strcat(res, info[i].string);
    }
    
    if (MyAtoI(res) == 0) {
        memset(res, 0, sizeof(char) * MAX_RES_LEN);
        res[0] = '0';
    }

    return res;
}
// ---------------------------解法 结束-----------------------------------------------------------------------












int main(int argc, const char *argv[])
{
    int nums_1[] = { 10,2 };
    int numsSize_1 = sizeof(nums_1) / sizeof(nums_1[0]);
    char* res_1 = largestNumber(nums_1, numsSize_1);




    int nums_2[] = { 3,30,34,5,9 };
    int numsSize_2 = sizeof(nums_2) / sizeof(nums_2[0]);
    char* res_2 = largestNumber(nums_2, numsSize_2);


    int nums_3[] = { 0, 0 };
    int numsSize_3 = sizeof(nums_3) / sizeof(nums_3[0]);
    char* res_3 = largestNumber(nums_3, numsSize_3);


    return 0;
}
