/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : OJ 1795. 【软件认证】最佳路径. https://oj.rnd.huawei.com/problems/1795/details
 * 作    者   :
 * 生成日期   :

 * 
      --- 
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <limits.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
#include "securec.h"
#include "vos_priorityqueue.h"
#include "vos_list.h"





/*
题目描述
给定单板间的有向连接关系：如单板101到单板102存在连接，权值为10，其连接关系描述为：101 102 10; 单板102到单板101存在连接，权值为6，其连接关系描述为：102 101 6。

基于单板间的有向连接关系，从起始单板到目的单板可能有0或多条可达的有向路径，某条路径权值是该路径上各连接的权值之和。

给定多组格式为起始单板 目的单板的查询命令，请依次计算并返回其最佳路径权值；若某条最佳路径不存在，则该条最佳路径权值返回-1。

最佳路径的规则如下：

经过的连接个数最少；
若符合规则 1 的路径存在多条，选择权值最小的；
解答要求
时间限制：1000ms, 内存限制：256MB
输入
首行为两个正整数n m

n 是单板间连接关系的数量，取值范围：[1, 500]
m 是查询命令的个数，取值范围：[1, 500]
接下来n行，每行是连接关系，单板编号取值范围：[1, 999]，权值取值范围：[1,100]；都为正整数

接下来m行，每行是需要查询最佳路径权值的起始单板、目的单板的编号。

输出
m行，每行一个整数，表示对应起始单板、目的单板的最佳路径权值的查询结果

样例
输入样例 1 复制

2 2
100 101 10
102 101 5
100 101
102 100
输出样例 1

10
-1
提示样例 1
输出第一行：单板100到单板101，最少经过1次跳转就可达，其权值为10，输出10
输出第二行：单板102到单板100，没有路径可达，因此输出-1
*/




// ---------------------------解法 ----有向权值图的多源最短路径---对所有节点进行BFS-------------------------------------------------
#define MAX_VER_NUM 1000
#define MAXN 500
#define MAXM 500

typedef struct Edge {
    int router1;
    int router2;
    int delay;
} Edge;

# define VERTEX_NUM MAX_VER_NUM   // 图顶点的最大数量
#define INF 0xffff // 没有路径时，将权值置位无效
typedef struct {
    int number;                   // 在图中的位置，也就是邻接矩阵的索引
    struct VERTEX_DATA_TYPE {
        int intVal;
        // char carVal;
    } info;                     // 顶点的数据类型定义.
} Vertex;
typedef struct {
    int vertextNum;                             // 顶点的数量
    int edgeNum;                                // 边的数量.
    Vertex vex[VERTEX_NUM];                     // 顶点的列表.
    unsigned short edges[VERTEX_NUM][VERTEX_NUM];        // 边的列表（邻接矩阵，大小表示边的权值）.
} MGraph;
MGraph g_mG;
int g_boardToGIdx[MAX_VER_NUM] = { 0 };  // 当做hash,判断重复顶点信息
int g_gIdxToBoardMap[MAX_VER_NUM] = { 0 };  // 当做hash,判断重复顶点信息

void GenGraph(int vertexNum, Edge* info, int infoCnt)
{
    g_mG.vertextNum = vertexNum;
    g_mG.edgeNum = infoCnt;
    for (int i = 0; i < g_mG.vertextNum; i++) {
        for (int j = 0; j < g_mG.vertextNum; j++) {
            g_mG.edges[i][j] = INF;
        }
        g_mG.edges[i][i] = 0;
        g_mG.vex[i].number = i;
        g_mG.vex[i].info.intVal = g_gIdxToBoardMap[i];
    }

    for (int i = 0; i < infoCnt; i++) {
        g_mG.edges[g_boardToGIdx[info[i].router1]][g_boardToGIdx[info[i].router2]] = info[i].delay;
    }
}

typedef struct PathVal {
    int step;
    int weight;
} PathVal;
typedef struct DisMatrix {
    PathVal val[VERTEX_NUM][VERTEX_NUM];        // 边的列表（邻接矩阵，大小表示边的权值）.
} DisMatrix;

typedef struct LinkVMatrix {
    int val[VERTEX_NUM][VERTEX_NUM];        // 边的列表（邻接矩阵，大小表示边的权值）.
} LinkVMatrix;

int CompareStruct(PathVal *a, PathVal *b)
{
    return (a->step - b->step != 0) ?
            a->step - b->step :
                a->weight - b->weight;
}

/*
 * Floyd 最短路径。
 *
 * 参数说明：
 *        g_mG -- 图
 *     disDp --  各个顶点之间距离的dp数组，一个一个顶点添加时更新
 *     linkVex -- 记录过程中中转节点，要得到完成路径时，迭代即可
 */
void Floyd(DisMatrix *disDp, LinkVMatrix *linkVex)
{
    // 初始化D, P数组
    for (int v = 0; v < g_mG.vertextNum; v++) {
        for (int w = 0; w < g_mG.vertextNum; w++) {
            disDp->val[v][w].weight = g_mG.edges[v][w];
            disDp->val[v][w].step = (g_mG.edges[v][w] == INF) ? INF : 1;
            linkVex->val[v][w] = w;
        }
        disDp->val[v][v].step = 0;
    }

    /* 开始循环查找最短路径，更新D P数组
       k为中转顶点，用于比对是否v经过k到w的开销比D数组中当前更小
       如果更小，则说明k更有可能存在于v到w最短路径上，更新disDp，及preVex
    */
    for (int k = 0; k < g_mG.vertextNum; k++) {
        // v行
        for (int v = 0; v < g_mG.vertextNum; v++) {
            // v行所有w列 
            for (int w = 0; w < g_mG.vertextNum; w++) {
                // 判断k是否有可能在v和w的最短路径上
                PathVal link = { disDp->val[v][k].step + disDp->val[k][w].step, disDp->val[v][k].weight + disDp->val[k][w].weight };
                if (CompareStruct(&disDp->val[v][w], &link) > 0) {
                    // 更新两点间的距离和
                    disDp->val[v][w] = link; 
                    //因为k存在于v到w的路径上，所以v想要到w需要先经过 v到k要经过的顶点
                    linkVex->val[v][w] = linkVex->val[v][k]; 
                }
            }
        }
    }
}



DisMatrix disDp = { 0 };
LinkVMatrix linkVex = { 0 };

// 待实现函数，在此函数中填入答题代码;
void GetBestRoute(int linkInfos[][3], int linkCnt,
                  int queryLinks[][2], int queryCnt,
                  int *queryResults)
{
    memset_s(&g_mG, (size_t)sizeof(g_mG), 0, (size_t)sizeof(g_mG));
    // 离散化处理顶点，不在顶点中的，则没有路径
    for (int i = 0; i < MAX_VER_NUM; i++) {
        g_boardToGIdx[i] = -1;
    }
    int verIdx = 0;
    for (int i = 0; i < linkCnt; i++) {
        for (int j = 0; j < 2; j++) {
            if (g_boardToGIdx[linkInfos[i][j]] == -1) {
                g_boardToGIdx[linkInfos[i][j]] = verIdx;
                g_gIdxToBoardMap[verIdx] = linkInfos[i][j];
                verIdx++;
            }
        }
    }

    GenGraph(verIdx, (Edge*)linkInfos, linkCnt);

    Floyd(&disDp, &linkVex);



    // printf("D数组(任意顶点间的最短路径开销或者叫距离)\n");
    // for (int i = 0; i < g_mG.vertextNum; i++) {
    //     for (int j = 0; j < g_mG.vertextNum; j++) {
    //         printf("%d->%d = %d      ", i, j, disDp.val[i][j]);
    //     }
    //     printf("\n");
    // }
    // printf("\n");

    printf("任意顶点间的最短路径:\n");
    for (int i = 0; i < g_mG.vertextNum; i++) {
        for (int j = i + 1; j < g_mG.vertextNum; j++) {
            printf("%d -> %d distance: %d %d, path:   ", g_mG.vex[i].info.intVal, g_mG.vex[j].info.intVal, disDp.val[i][j].step,  disDp.val[i][j].weight);
            printf("%d->", g_mG.vex[j].info.intVal); // 先打印源点
            int k = linkVex.val[i][j];
            while (k != j) {
                printf("%d->", g_mG.vex[k].info.intVal);
                k = linkVex.val[k][j]; // 相当于递归查找
            }
            printf("%d\n", g_mG.vex[k].info.intVal);
        }
    }


    memset_s(queryResults, MAXM, 0, MAXM);
    int resCnt = 0;
    for (int i = 0; i < queryCnt; i++) {
        int boardStart = queryLinks[i][0];
        int boardEnd = queryLinks[i][1];
        int gIdxStart = g_boardToGIdx[boardStart];
        int gIdxEnd = g_boardToGIdx[boardEnd];
        
        if (gIdxStart == -1 || gIdxEnd == -1) {
            queryResults[resCnt++] = -1;
        } else {
            queryResults[resCnt++] = (disDp.val[gIdxStart][gIdxEnd].step == INF) ? -1 : disDp.val[gIdxStart][gIdxEnd].weight;
        }
    }
}

/* 代码仅供参考，注意避免圈复杂度过大 */
int main(void)
{
    int n, m;
    if (scanf_s("%d %d", &n, &m) != 2) { return -1; }

    static int linkInfos[MAXN][3];
    int i;
    for (i = 0; i < n; i++) {
        if (scanf_s("%d %d %d", 
                    &linkInfos[i][0], 
                    &linkInfos[i][1], 
                    &linkInfos[i][2]) != 3) {
            return -1;
        }
    }

    static int queryLinks[MAXM][2];
    for (i = 0; i < m; i++) {
        if (scanf_s("%d %d", 
                    &queryLinks[i][0], 
                    &queryLinks[i][1]) != 2) {
            return -1;
        }
    }

    static int queryResults[MAXM];
    GetBestRoute(linkInfos, n, queryLinks, m, queryResults);
    for (i = 0; i < m; i++) {
        (void)printf("%d\n", queryResults[i]);
    }
    return 0;
}
// ---------------------------解法 结束---------------------------------------------------------------------
