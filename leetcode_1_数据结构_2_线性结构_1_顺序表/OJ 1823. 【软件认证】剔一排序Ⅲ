/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : OJ 1823. 【软件认证】剔一排序Ⅲ. https://oj.rnd.huawei.com/problems/1823/details
 * 作    者   :
 * 生成日期   :

 * 
      --- 
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <limits.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
#include "securec.h"
// #include "vos_priorityqueue.h"





/*
题目描述
给定一个由正整数数组，请按以下规则处理，使得数组有序（递增或者递减，不一定要严格递增或严格递减）：

数组已经是有序的，则不做处理，返回数组中最小的元素值。
如果数组不是有序的，
若删除其中一个元素，使得剩余元素是有序的，返回需要删除的元素值；如果存在多个解，则选择删除元素值最小的。
若无解，返回-1。
解答要求
时间限制：1000ms, 内存限制：256MB
输入
第一行一个整数，表示给定数组的长度 N，范围 [2, 200]。
第二行N个整数，表示给定的数组，每个元素值的范围 [0, 200]。

输出
一个整数，表示所求的返回值。

样例
输入样例 1 复制

2
1 2
输出样例 1

1
提示样例 1
给定数组已经有序（递增），所以返回改数组的最小值 1 。



输入样例 2 复制

5
4 4 2 3 1
输出样例 2

2
提示样例 2
给定数组不是有序的，删除2后数组4 4 3 1是有序（递减）的，剔除3后数组4 4 2 1也是有序（递减）的，2和3都是可行的解，因为2比3小，因此返回 2 。

*/




// ---------------------------解法 ----数学题 没啥意思-------------------------------------------------

#define MAX_N 200

// 待实现函数，在此函数中填入答题代码。
int SortByDeleteOne(int *nums, int numsSize)
{
    // specil case
    // if (numsSize == 1) {
    //     return nums[0];
    // }

    int status[MAX_N] = { 0 };
    int posCnt = 0;
    int disCnt = 0;
    for (int i = 1; i < numsSize; i++) {
        status[i] = nums[i] - nums[i - 1];
        posCnt += (status[i] > 0) ? 1: 0;
        disCnt += (status[i] < 0) ? 1: 0;
    }

    if (posCnt == 0) {
        return nums[numsSize - 1];
    }

    if (disCnt == 0) {
        return nums[0];
    }

    if (posCnt > 1 && disCnt > 1) {
        return -1;
    }

    int resMin = 1000000;
    if (posCnt == 1) {
        int pos;
        for (int i = 1; i < numsSize; i++) {
            if (status[i] > 0) {
                pos = i;
                break;
            }
        }

        // 删除 pos - 1
        if ((pos - 2 < 0) || nums[pos] - nums[pos - 2] <= 0) {
            resMin = fmin(resMin, nums[pos - 1]);
        }
        
        // 删除 pos
        if (pos == numsSize - 1 || nums[pos + 1] - nums[pos - 1] <= 0) {
            resMin = fmin(resMin, nums[pos]);
        }
    } 

    if (disCnt == 1) {
        int pos;
        for (int i = 1; i < numsSize; i++) {
            if (status[i] < 0) {
                pos = i;
                break;
            }
        }

        // 删除 pos - 1
        if ((pos - 2 > 0) || nums[pos] - nums[pos - 2] >= 0) {
            resMin = fmin(resMin, nums[pos - 1]);
        }
        
        // 删除 pos
        if (pos == numsSize - 1 || nums[pos + 1] - nums[pos - 1] >= 0) {
            resMin = fmin(resMin, nums[pos]); 
        }
    } 


    return resMin;
}

int main(void)
{   
    int numsSize = 0;  
    if (scanf_s("%d\n", &numsSize) != 1) { return -1; }

    int nums[MAX_N];
    for (int i = 0; i < numsSize; i++) {
        if (scanf_s("%d ", &nums[i]) != 1) { return -1; }
    }

    int output = SortByDeleteOne(nums, numsSize);
    (void)printf("%d", (output > MAX_N) ? -1 : output);
    return 0;
}

// ---------------------------解法 结束---------------------------------------------------------------------


