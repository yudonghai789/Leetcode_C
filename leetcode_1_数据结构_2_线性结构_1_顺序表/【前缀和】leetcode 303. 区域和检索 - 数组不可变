/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : leetcode 303. 区域和检索 - 数组不可变. https://leetcode-cn.com/problems/range-sum-query-immutable/
 * 作    者   :
 * 生成日期   :

 * 
      --- 
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
// #include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"
// #include "vos_priorityqueue.h"





/*
303. 区域和检索 - 数组不可变
给定一个整数数组  nums，处理以下类型的多个查询:

计算索引 left 和 right （包含 left 和 right）之间的 nums 元素的 和 ，其中 left <= right
实现 NumArray 类：

NumArray(int[] nums) 使用数组 nums 初始化对象
int sumRange(int i, int j) 返回数组 nums 中索引 left 和 right 之间的元素的 总和 ，包含 left 和 right 两点（也就是 nums[left] + nums[left + 1] + ... + nums[right] )
 

示例 1：

输入：
["NumArray", "sumRange", "sumRange", "sumRange"]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
输出：
[null, 1, -1, -3]

解释：
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return 1 ((-2) + 0 + 3)
numArray.sumRange(2, 5); // return -1 (3 + (-5) + 2 + (-1)) 
numArray.sumRange(0, 5); // return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))
 

提示：

1 <= nums.length <= 104
-105 <= nums[i] <= 105
0 <= i <= j < nums.length
最多调用 104 次 sumRange 方法
*/





// ---------------------------解法 开始-----暴力遍历: -----------------------------------------------------
// typedef struct {
//     int *array;
//     int arrLen;
// } NumArray;


// NumArray* numArrayCreate(int* nums, int numsSize) {
//     NumArray *obj = (NumArray *)malloc(sizeof(NumArray));
//     obj->arrLen = numsSize;
//     obj->array = (int *)malloc(sizeof(int) * numsSize);
//     memcpy(obj->array, nums, sizeof(int) * numsSize);
//     return obj;
// }

// int numArraySumRange(NumArray* obj, int left, int right) {
//     int res = 0;
//     for (int i = left; i < right; i++) {
//         res = res + obj->array[i];
//     }
//     return res;
// }

// void numArrayFree(NumArray* obj) {
//     free(obj->array);
//     free(obj);
// }
// ---------------------------解法 结束---------------------------------------------------------------------






// ---------------------------解法 开始-----数组前缀和和技巧 -----------------------------------------------------
typedef struct {
    int arrLen;
    int *preSum;
} NumArray;

NumArray* numArrayCreate(int* nums, int numsSize) {
    NumArray *obj = (NumArray *)malloc(sizeof(NumArray));
    obj->arrLen = numsSize;

    obj->preSum = (int *)malloc(sizeof(int) * (numsSize + 1));
    obj->preSum[0] = 0;    // 方便计算统一
    for (int i = 1; i <= numsSize; i++) {
        obj->preSum[i] = obj->preSum[i - 1] + nums[i - 1];
    }

    return obj;
}

int numArraySumRange(NumArray* obj, int left, int right) {
    int res = obj->preSum[right + 1] - obj->preSum[left];
    return res;
}

void numArrayFree(NumArray* obj) {
    free(obj->preSum);
    free(obj);
}
// ---------------------------解法 结束---------------------------------------------------------------------





/* 代码仅供参考，注意避免圈复杂度过大 */
int main(void)
{
    int nums_1[] = {-2, 0, 3, -5, 2, -1};
    int numsSize_1 = sizeof(nums_1) / sizeof(nums_1[0]);
    NumArray* obj_1 = numArrayCreate(nums_1, numsSize_1);
    int param1_1;
    param1_1 = numArraySumRange(obj_1, 0, 2);


    numArrayFree(obj_1);
    return 0;
}
