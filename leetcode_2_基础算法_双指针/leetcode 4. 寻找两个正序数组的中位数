/******************************************************************************
* 版权所有 (c) 
* 功能描述   : leetcode 4. 寻找两个正序数组的中位数   https://leetcode.cn/problems/median-of-two-sorted-arrays/
* 作    者   : 
* 生成日期   : 
******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"









// ---------------------------解法 开始---双指针----------------------------------------------
void UpdateVal(int *val1, int *val2, int data)
{
    *val1 = *val2;
    *val2 = data;
}

double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size)
{
    int mid = (nums1Size + nums2Size) / 2;

    int val1, val2;
    int cnt = 0;
    int pointer1 = -1;
    int pointer2 = -1;
    while (cnt <= mid) {
        if (pointer1 < nums1Size - 1 && pointer2 < nums2Size - 1) {
            if (nums1[pointer1 + 1] <= nums2[pointer2 + 1]) {
                UpdateVal(&val1, &val2, nums1[++pointer1]);
            } else {
                UpdateVal(&val1, &val2, nums2[++pointer2]);
            }
            cnt++;
            continue;
        }

        if (pointer1 < nums1Size - 1) {
            UpdateVal(&val1, &val2, nums1[++pointer1]);
            cnt++;
        }

        if (pointer2 < nums2Size - 1) {
            UpdateVal(&val1, &val2, nums2[++pointer2]);
            cnt++;
        }
    }

    if ((nums1Size + nums2Size) % 2 == 0) {
        return ((double)(val1 + val2)) / 2.0;
    } else {
        return (double)val2;
    }
}
// ---------------------------解法 结束---------------------------------------------------------------------










int main(void)
{
    int nums1_1[] = {1,3};
    int nums1Size_1 = sizeof(nums1_1) / sizeof(nums1_1[0]);
    int nums2_1[] = {2};
    int nums2Size_1 = sizeof(nums2_1) / sizeof(nums2_1[0]);
    double res_1 = findMedianSortedArrays(nums1_1, nums1Size_1, nums2_1, nums2Size_1);
    assert(res_1 == 2.0);



    int nums1_2[] = {1,2};
    int nums1Size_2 = sizeof(nums1_2) / sizeof(nums1_2[0]);
    int nums2_2[] = {3,4};
    int nums2Size_2 = sizeof(nums2_2) / sizeof(nums2_2[0]);
    double res_2 = findMedianSortedArrays(nums1_2, nums1Size_2, nums2_2, nums2Size_2);
    assert(res_2 == 2.0);



    return 0;
}


