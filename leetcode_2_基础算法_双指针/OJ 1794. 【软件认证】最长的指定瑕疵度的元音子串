/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : OJ 1794. 【软件认证】最长的指定瑕疵度的元音子串. https://oj.rnd.huawei.com/problems/1794/details
 * 作    者   :
 * 生成日期   :

 * 
      --- 
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <limits.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
#include "securec.h"
#include "vos_priorityqueue.h"
#include "vos_list.h"





/*
题目描述
定义：开头和结尾都是元音字母（aeiouAEIOU）的字符串为 元音字符串 ，其中混杂的非元音字母数量为其 瑕疵度 。比如:

“a” 、 “aa”是元音字符串，其瑕疵度都为0
“aiur”不是元音字符串（结尾不是元音字符）
“abira”是元音字符串，其瑕疵度为2
给定一个字符串，请找出指定瑕疵度的最长元音字符子串，并输出其长度，如果找不到满足条件的元音字符子串，输出0。

子串：字符串中任意个连续的字符组成的子序列称为该字符串的子串。

解答要求
时间限制：1000ms, 内存限制：256MB
输入
首行输入是一个整数，表示预期的瑕疵度flaw，取值范围 [0, 65535]。
接下来一行是一个仅由字符a-z和A-Z组成的字符串，字符串长度 (0, 65535]。

输出
输出为一个整数，代表满足条件的元音字符子串的长度。

样例
输入样例 1 复制

0
asdbuiodevauufgh
输出样例 1

3
提示样例 1
满足条件的最长元音字符子串有两个，分别为uio和auu，长度为3。



输入样例 2 复制

2
aeueo
输出样例 2

0
提示样例 2
没有满足条件的元音字符子串，输出0



输入样例 3 复制

1
aabeebuu
输出样例 3

5
提示样例 3
满足条件的最长元音字符子串有两个，分别为aabee和eebuu，长度为5
*/




// ---------------------------解法 ---------------------------------------------------------------
#define MAX_LEN 65536
typedef struct PoInfo {
    int isVowelPo;
    int preflawNum;
} PoInfo;

int TwoPointer(int flaw, PoInfo* isVowel, int isVowelCnt)
{
    int reslen = 0;
    int left = 0;
    int right = 0;
    while (right < isVowelCnt && left <= right && isVowel[right].preflawNum - isVowel[left].preflawNum <= flaw) {
        // 当前满足条件窗口基本条件
        if (isVowel[right].preflawNum - isVowel[left].preflawNum == flaw) {
            reslen = fmax(reslen, isVowel[right].isVowelPo - isVowel[left].isVowelPo + 1);
        }

        // 右指针进行下一步尝试
        right++;

        // 由于右指针的尝试，可能导致窗口不满足条件，左指针进行判断，将窗口拉回满足条件的时刻
        while (left <= right && isVowel[right].preflawNum - isVowel[left].preflawNum > flaw) {
            left++;
        }
    }

    return reslen;
}

int GetLongestFlawedVowelSubstrLen(int flaw, char* str)
{
    int len = strlen(str);
    PoInfo isVowel[MAX_LEN] = { 0 };
    int isVowelCnt = 0;
    int flawNum = 0;
    for (int i = 0; i < len; i++) {
        if (str[i] == 'a' || str[i] == 'A' ||
            str[i] == 'e' || str[i] == 'E' ||
            str[i] == 'i' || str[i] == 'I' ||
            str[i] == 'o' || str[i] == 'O' ||
            str[i] == 'u' || str[i] == 'U') {
            isVowel[isVowelCnt].isVowelPo = i;
            isVowel[isVowelCnt].preflawNum = flawNum;
            isVowelCnt++;
        } else {
            flawNum++;
        }
    }

    return TwoPointer(flaw, isVowel, isVowelCnt);
}


int main(void) 
{ 
    int flaw = 0;  
    if (scanf_s("%d\n", &flaw) != 1) { return -1; }   
    char str[MAX_LEN];   
    if (NULL == gets_s(str, sizeof(str))) { return -1; }   
    int result = GetLongestFlawedVowelSubstrLen(flaw, str);
    (void)printf("%d", result); 
    return 0;
}
// ---------------------------解法 结束---------------------------------------------------------------------
/*
0
eeeeeeee
// 8


1
ghghghghghghghg
// 0

0
a
// 1



5
a
// 1

0
NA
// 1

*/

// ---------------------------解法 减少函数圈复杂化度---------------------------------------------------------------------
#define MAX_LEN 65536
typedef struct PoInfo {
    int isVowelPo;
    int preflawNum;
} PoInfo;


#define VOWEL_NUM 10
char g_vowel[VOWEL_NUM] = { 'a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U' };
bool IsVowel(char chater)
{
    for (int i = 0; i < VOWEL_NUM; i++) {
        if (g_vowel[i] == chater) {
            return true;
        }
    }

    return false;
}

bool JudgeRight(int flaw, PoInfo* isVowel, int isVowelCnt, int left, int right)
{
    if (right < isVowelCnt && left <= right && isVowel[right].preflawNum - isVowel[left].preflawNum <= flaw) {
        return true;
    }

    return false;
}

bool JudgeLeft(int flaw, PoInfo* isVowel, int isVowelCnt, int left, int right)
{
    if (left <= right && isVowel[right].preflawNum - isVowel[left].preflawNum > flaw) {
        return true;
    }

    return false;
}

int TwoPointer(int flaw, PoInfo* isVowel, int isVowelCnt)
{
    int reslen = 0;
    int left = 0;
    int right = 0;
    while (JudgeRight(flaw, isVowel, isVowelCnt, left, right) == true) {
        // 当前满足条件窗口基本条件
        if (isVowel[right].preflawNum - isVowel[left].preflawNum == flaw) {
            reslen = fmax(reslen, isVowel[right].isVowelPo - isVowel[left].isVowelPo + 1);
        }

        // 右指针进行下一步尝试
        right++;

        // 由于右指针的尝试，可能导致窗口不满足条件，左指针进行判断，将窗口拉回满足条件的时刻
        while (JudgeLeft(flaw, isVowel, isVowelCnt, left, right) == true) {
            left++;
        }
    }

    return reslen;
}

int GetLongestFlawedVowelSubstrLen(int flaw, char* str)
{
    int len = (int)strlen(str);
    PoInfo isVowel[MAX_LEN] = { 0 };
    int isVowelCnt = 0;
    int flawNum = 0;
    for (int i = 0; i < len; i++) {
        if (IsVowel(str[i])) {
            isVowel[isVowelCnt].isVowelPo = i;
            isVowel[isVowelCnt].preflawNum = flawNum;
            isVowelCnt++;
        } else {
            flawNum++;
        }
    }

    return TwoPointer(flaw, isVowel, isVowelCnt);
}


int main(void)
{
    int flaw = 0;
    if (scanf_s("%d\n", &flaw) != 1) { return -1; }
    char str[MAX_LEN];
    if (NULL == gets_s(str, sizeof(str))) { return -1; }
    int result = GetLongestFlawedVowelSubstrLen(flaw, str);
    (void)printf("%d", result);
    return 0;
}
// ---------------------------解法 结束---------------------------------------------------------------------
