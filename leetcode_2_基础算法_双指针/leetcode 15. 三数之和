/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : leetcode 15. 三数之和  https://leetcode-cn.com/problems/3sum/
 * 作    者   :
 * 生成日期   :
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"





// ---------------------------开始----回溯算法-----包含重复元素,结果不能包含重复组合的组合问题---------------------------------------------------------

// typedef enum Status {
//     INIT = 0,
//     REMOVE = INIT,
//     USING = 0x5a5a
// } Status;

// typedef struct BkTPoin {
//     int length;
//     int sum;
//     int item[3];
//     Status usedFlag[3000];
// } BkTPoin;

// void BackTrace(int* nums, int numsSize, int start, int** res, int* returnSize, BkTPoin *pointer)
// {
//     if (pointer->length == 3) {
//         if (pointer->sum == 0) {
//             res[(*returnSize)] = (int *)malloc(sizeof(int) * 3);
//             memcpy(res[(*returnSize)], pointer->item, sizeof(int) * 3);
//             (*returnSize)++;
//         }

//         return;
//     }

//     for (int i = start; i < numsSize; i++) {
//         if ((i > 0)&& (nums[i] == nums[i - 1]) && (pointer->usedFlag[i - 1] == REMOVE)){
//             continue;
//         }

//         if (pointer->sum + nums[i] > 0) {
//             break;
//         }

//         pointer->sum = pointer->sum + nums[i];
//         pointer->item[pointer->length++] = nums[i];
//         pointer->usedFlag[i] = USING;
//         BackTrace(nums, numsSize, i + 1, res, returnSize, pointer);
//         pointer->sum = pointer->sum - nums[i];
//         pointer->item[--pointer->length] = 0;
//         pointer->usedFlag[i] = REMOVE;
//     }
// }

// int IntCom(const void *a, const void *b)
// {
//     return *(int *)a > *(int *)b;
// }

// /**
//  * Return an array of arrays of size *returnSize.
//  * The sizes of the arrays are returned as *returnColumnSizes array.
//  * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
//  */
// int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes)
// {
//     if (nums == NULL) {
//         return NULL;
//     }

//     qsort(nums, numsSize, sizeof(int), IntCom);

//     *returnSize = 0;
//     int** res = (int **)malloc(sizeof(int *) * numsSize * numsSize * numsSize);
//     memset(res, 0, sizeof(int *) * numsSize * numsSize * numsSize);

//     BkTPoin pointer = { 0 };
//     BackTrace(nums, numsSize, 0, res, returnSize, &pointer);

//     (*returnColumnSizes) = (int *)malloc(sizeof(int) * (*returnSize));
//     for (int i = 0; i < (*returnSize); i++) {
//         (*returnColumnSizes)[i] = 3;
//     }

//     return res;
// }

// ---------------------------结束--------------------------------------------------------------------





// ---------------------------开始----回溯算法-----包含重复元素,结果不能包含重复组合的组合问题---------------------------------------------------------
// #define MAX_RES_LEN 3000*3000

// typedef struct BkTPoin {
//     int length;
//     int sum;
//     int item[3];
// } BkTPoin;

// void BackTrace(int* nums, int numsSize, int start, int** res, int* returnSize, BkTPoin *pointer)
// {
//     if (pointer->length == 3) {
//         if (pointer->sum == 0) {
//             res[(*returnSize)] = (int *)malloc(sizeof(int) * 3);
//             memcpy(res[(*returnSize)], pointer->item, sizeof(int) * 3);
//             (*returnSize)++;
//         }

//         return;
//     }

//     for (int i = start; i < numsSize; i++) {
//         if ((i > start) && (nums[i] == nums[i - 1])) {
//             continue;
//         }

//         if (pointer->sum + nums[i] > 0) {
//             break;
//         }

//         pointer->sum = pointer->sum + nums[i];
//         pointer->item[pointer->length++] = nums[i];
//         BackTrace(nums, numsSize, i + 1, res, returnSize, pointer);
//         pointer->sum = pointer->sum - nums[i];
//         pointer->item[--pointer->length] = 0;
//     }
// }

// int IntCom(const void *a, const void *b)
// {
//     return *(int *)a > *(int *)b;
// }

// /**
//  * Return an array of arrays of size *returnSize.
//  * The sizes of the arrays are returned as *returnColumnSizes array.
//  * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
//  */
// int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes)
// {
//     if (nums == NULL) {
//         return NULL;
//     }

//     qsort(nums, numsSize, sizeof(int), IntCom);

//     *returnSize = 0;
//     int** res = (int **)malloc(sizeof(int *) * MAX_RES_LEN);
//     memset(res, 0, sizeof(int *) * MAX_RES_LEN);

//     BkTPoin pointer = { 0 };
//     BackTrace(nums, numsSize, 0, res, returnSize, &pointer);

//     (*returnColumnSizes) = (int *)malloc(sizeof(int) * (*returnSize));
//     for (int i = 0; i < (*returnSize); i++) {
//         (*returnColumnSizes)[i] = 3;
//     }

//     return res;
// }

// ---------------------------结束--------------------------------------------------------------------




// ---------------------------开始----双指针---------------------------------------------------------
// #define MAX_RES_LEN 3000*3000

// void TwoPoint(int* nums, int numsSize, int** res, int* returnSize)
// {
//     for (int i = 0; i < numsSize; i++) {
//         if ((i > 0) && (nums[i] == nums[i - 1])) {
//             continue;
//         }

//         int left = i + 1;
//         int right = numsSize - 1;

//         while (left < right) {
//             int sum = nums[i] + nums[left] + nums[right];
//             if (sum == 0) {
//                 res[(*returnSize)] = (int *)malloc(sizeof(int) * 3);
//                 res[(*returnSize)][0] = nums[i];
//                 res[(*returnSize)][1] = nums[left];
//                 res[(*returnSize)][2] = nums[right];
//                 (*returnSize)++;

//                 left++;
//                 right--;
//                 while ((left < right) && (nums[left] == nums[left - 1])) {
//                     left++;
//                 }
//                 while ((left < right) && (nums[right] == nums[right + 1])) {
//                     right--;
//                 }
//             } else if (sum > 0) {
//                 // 也可以去重，但是没必要
//                 right--;
//             } else {
//                 // 也可以去重，但是没必要
//                 left++;
//             }
//         }
//     }
// }


// int IntCom(const void *a, const void *b)
// {
//     return *(int *)a > *(int *)b;
// }

// /**
//  * Return an array of arrays of size *returnSize.
//  * The sizes of the arrays are returned as *returnColumnSizes array.
//  * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
//  */
// int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes)
// {
//     if (nums == NULL) {
//         return NULL;
//     }

//     qsort(nums, numsSize, sizeof(int), IntCom);

//     *returnSize = 0;
//     int** res = (int **)malloc(sizeof(int *) * MAX_RES_LEN);
//     memset(res, 0, sizeof(int *) * MAX_RES_LEN);

//     TwoPoint(nums, numsSize, res, returnSize);

//     (*returnColumnSizes) = (int *)malloc(sizeof(int) * (*returnSize));
//     for (int i = 0; i < (*returnSize); i++) {
//         (*returnColumnSizes)[i] = 3;
//     }

//     return res;
// }

// ---------------------------结束--------------------------------------------------------------------



int main()
{

    int nums_1[] = {-1,0,1,2,-1,-4};
    int numsSize_1 = 6;
    int returnSize_1 = 454564;
    int *returnColumnSizes_1 = NULL;
    int **res = threeSum(nums_1, numsSize_1, &returnSize_1, &returnColumnSizes_1);


    return 0;
}
