
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.
 */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
#include "securec.h"
#include "systemDesgin.h"
#include <math.h>
#include <assert.h>

/* 
给你两个字符串 a 和 b ，它们长度相同。请你选择一个下标，将两个字符串都在 相同的下标 分割开。由 a 可以得到两个字符串： aprefix 和 asuffix ，满足 a = aprefix + asuffix ，同理，由 b 可以得到两个字符串 bprefix 和 bsuffix ，满足 b = bprefix + bsuffix 。请你判断 aprefix + bsuffix 或者 bprefix + asuffix 能否构成回文串。

当你将一个字符串 s 分割成 sprefix 和 ssuffix 时， ssuffix 或者 sprefix 可以为空。比方说， s = "abc" 那么 "" + "abc" ， "a" + "bc" ， "ab" + "c" 和 "abc" + "" 都是合法分割。

如果 能构成回文字符串 ，那么请返回 true，否则返回 false 。

注意， x + y 表示连接字符串 x 和 y 。

 

示例 1：

输入：a = "x", b = "y"
输出：true
解释：如果 a 或者 b 是回文串，那么答案一定为 true ，因为你可以如下分割：
aprefix = "", asuffix = "x"
bprefix = "", bsuffix = "y"
那么 aprefix + bsuffix = "" + "y" = "y" 是回文串。
示例 2：

输入：a = "abdef", b = "fecab"
输出：true
示例 3：

输入：a = "ulacfd", b = "jizalu"
输出：true
解释：在下标为 3 处分割：
aprefix = "ula", asuffix = "cfd"
bprefix = "jiz", bsuffix = "alu"
那么 aprefix + bsuffix = "ula" + "alu" = "ulaalu" 是回文串。
 

提示：

1 <= a.length, b.length <= 105
a.length == b.length
a 和 b 都只包含小写英文字母

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/split-two-strings-to-make-palindrome
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

 */

/* leetcode 1616. 分割两个字符串得到回文串
 */



// ---------------------------解法一 开始---暴力--------------------------------------------------


// ---------------------------解法一结束--------------------------------------------------


// ---------------------------解法一 开始---双指针，从两端往中间靠近------------------------------------------------
bool checkPalindromeFormation(char * a, char * b)
{
    bool oriA = true;
    bool oriB = true;
    bool changeA = true;
    bool changeB = true;

    int left = 0;
    int right = strlen(a) - 1;

    while (left < right) {
        // 先判断交换能不能满足
        if (changeA == true) {
            if (b[left] != a[right]) {
                changeA = false;
            }
        } 

        if (changeB == true) {
            if (a[left] != b[right]) {
                changeB = false;
            }
        }

        // 再判断本身能不能满足，只要本身是回文，无论是哪一个，都可以
        if ((changeA == false) && (changeB == false)) {
            if (a[left] != a[right]) {
                oriA = false;
            } 
            if (b[left] != b[right]) {
                oriB = false;
            } 
        }

        if ((changeA == false) &&  (changeB == false) && (oriA == false) && (oriB == false)) {
            return false;
        }

        left++;
        right--;
    }

    return true;
}

// ---------------------------解法一结束--------------------------------------------------

int main() {
    char a_1[] = "x";
    char b_1[] = "y";
    bool result_1 = checkPalindromeFormation(a_1, b_1);
    assert(result_1 == true);


    char a_2[] = "xxx";
    char b_2[] = "yyx";
    bool result_2 = checkPalindromeFormation(a_2, b_2);
    assert(result_2 == true);


    char a_3[] = "abdef";
    char b_3[] = "fecab";
    bool result_3 = checkPalindromeFormation(a_3, b_3);
    assert(result_3 == true);

    char a_4[] = "ulacfd";
    char b_4[] = "jizalu";
    bool result_4 = checkPalindromeFormation(a_4, b_4);
    assert(result_4 == true);


    // 两端靠交换，中间靠本身
    char a_5[] = "pvhmupgqeltozftlmfjjde";
    char b_5[] = "yjgpzbezspnnpszebzmhvp";
    bool result_5 = checkPalindromeFormation(a_5, b_5);
    assert(result_5 == true);

    // 两端靠交换，中间靠本身
    char a_6[] = "aejbaalflrmkswrydwdkdwdyrwskmrlfqizjezd";
    char b_6[] = "uvebspqckawkhbrtlqwblfwzfptanhiglaabjea";
    bool result_6 = checkPalindromeFormation(a_6, b_6);
    assert(result_6 == true);



    char a_7[] = "abccef";
    char b_7[] = "cgdhga";
    bool result_7 = checkPalindromeFormation(a_7, b_7);
    assert(result_7 == true);


    return 0;
}
