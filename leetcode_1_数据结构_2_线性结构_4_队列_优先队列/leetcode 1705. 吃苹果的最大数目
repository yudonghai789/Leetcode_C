/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : leetcode 1705. 吃苹果的最大数目   https://leetcode.cn/problems/maximum-number-of-eaten-apples/
 * 作    者   :
 * 生成日期   :
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"



/*

1705. 吃苹果的最大数目
有一棵特殊的苹果树，一连 n 天，每天都可以长出若干个苹果。在第 i 天，树上会长出 apples[i] 个苹果，这些苹果将会在 days[i] 天后（也就是说，第 i + days[i] 天时）腐烂，变得无法食用。也可能有那么几天，树上不会长出新的苹果，此时用 apples[i] == 0 且 days[i] == 0 表示。

你打算每天 最多 吃一个苹果来保证营养均衡。注意，你可以在这 n 天之后继续吃苹果。

给你两个长度为 n 的整数数组 days 和 apples ，返回你可以吃掉的苹果的最大数目。

 

示例 1：

输入：apples = [1,2,3,5,2], days = [3,2,1,4,2]
输出：7
解释：你可以吃掉 7 个苹果：
- 第一天，你吃掉第一天长出来的苹果。
- 第二天，你吃掉一个第二天长出来的苹果。
- 第三天，你吃掉一个第二天长出来的苹果。过了这一天，第三天长出来的苹果就已经腐烂了。
- 第四天到第七天，你吃的都是第四天长出来的苹果。
示例 2：

输入：apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]
输出：5
解释：你可以吃掉 5 个苹果：
- 第一天到第三天，你吃的都是第一天长出来的苹果。
- 第四天和第五天不吃苹果。
- 第六天和第七天，你吃的都是第六天长出来的苹果。

*/


// ---------------------------解法 开始----贪心算法，超时超内存---------------------------
// #define MAX_APPLE 5000
// #define MAX_DAYS 5000

// typedef struct AppleKind {
//     int srartDay;
//     int entDay;
//     int num;
// } AppleKind;

// AppleKind g_allApple[MAX_APPLE];

// #define MAX_CHOSE MAX_APPLE
// typedef struct DaysChose {
//     int choseNum;
//     AppleKind *arr[MAX_CHOSE];
// } DaysChose;
// DaysChose g_days[MAX_DAYS + MAX_APPLE];

// int eatenApples(int* apples, int applesSize, int* days, int daysSize)
// {
//     if (applesSize > 5000) {
//         return 0;
//     }
//     int maxEndDay = -1;
//     memset(g_allApple, 0, sizeof(g_allApple));
//     memset(g_days, 0, sizeof(g_days));
//     for (int i = 0; i < applesSize; i++) {
//         g_allApple[i].srartDay = i;
//         g_allApple[i].entDay = i + days[i] - 1;
//         g_allApple[i].num = apples[i];
//         for (int j = g_allApple[i].srartDay; j <= g_allApple[i].entDay; j++) {
//            g_days[j].arr[g_days[j].choseNum++] = &g_allApple[i];
//         }

//         maxEndDay = fmax(maxEndDay, g_allApple[i].entDay);
//     }

//     int res = 0;
//     for (int i = 0; i <= maxEndDay; i++) {
//         int earily = INT_MAX;
//         AppleKind *earAppIdx = NULL;
//         for (int j = 0; j < g_days[i].choseNum; j++) {
//             AppleKind *onr =  g_days[i].arr[j];
//             if (onr->num > 0 && onr->entDay < earily) {
//                 earily = onr->entDay;
//                 earAppIdx = onr;
//             }
//         }
//         if (earily != INT_MAX) {
//             earAppIdx->num--;
//             res++;
//         }
//     }

//     return res;
// }
// ---------------------------解法 结束-------------------------------------------------------

// ---------------------------解法 开始----贪心算法，每天都吃掉过期时间早的苹果-----优先队列----------------------
#define MAX_APPLE 20010
#define MAX_APPLE_DAY 20010


typedef struct AppleKind {
    int srartDay;
    int entDay;
    int num;
} AppleKind;
AppleKind g_allApple[MAX_APPLE];




// 优先队列管理所有可选的苹果
#define MINPQSize (1)
#define MinDATA (-32767)
typedef struct EelememtType {
    AppleKind *apple;
} EelememtType;

typedef struct HeapStruct {
    int capacity;
    int size;
    EelememtType *elems;   // 做题的时候就不用动态申请，直接写死最大值就好了
} HeapStruct, PriorityQueue;
void Swap(PriorityQueue* H, int IndexA, int indexB)
{
    EelememtType tmp = H->elems[IndexA];
    H->elems[IndexA] = H->elems[indexB];
    H->elems[indexB] = tmp;
}

int Compare(PriorityQueue* H, int IndexA, int indexB)
{
    return H->elems[IndexA].apple->entDay > H->elems[indexB].apple->entDay;
}
int get_parent_index(int index)
{
    return (index) / 2;
}

// 计算下标为index的节点的左孩子下标
int get_left_child_index(int root)
{
    return 2 * root;
}

// 计算下标为index的节点的右孩子下标
int get_right_child_index(int root)
{
    return 2 * root + 1;
}
PriorityQueue* Initialize(int initMaxElem)
{
    if (initMaxElem < MINPQSize) {
        printf("size error \n");
    }

    PriorityQueue* H = (PriorityQueue *)malloc(sizeof(PriorityQueue));
    if (H == NULL) {
        printf("maloc error \n");
    }
    memset(H, 0, sizeof(PriorityQueue));


    H->elems = (EelememtType *)malloc(sizeof(EelememtType) * (initMaxElem + 1));
    if (H->elems == NULL) {
        printf("maloc error \n");
    }
    memset(H->elems, 0, sizeof(EelememtType) * (initMaxElem + 1));

    H->capacity = initMaxElem;
    H->size = 0;

    return H;
}
void Swim(PriorityQueue* H, int IndexK)
{
    // indexK >1 判断是否已经到了顶，
    while ((IndexK > 1) && Compare(H, get_parent_index(IndexK), IndexK)) {
        Swap(H, get_parent_index(IndexK), IndexK);
        IndexK = get_parent_index(IndexK);
    }
}
void Sink(PriorityQueue* H, int IndexK)
{
    // 如果已经沉到了堆低，就沉不下去了
    while (get_left_child_index(IndexK) <= H->size) {

        // 先比左右节点,假设左子节点大
        int order = get_left_child_index(IndexK);
        if (get_right_child_index(IndexK) <= H->size && Compare(H, order, get_right_child_index(IndexK))) { // 如果右子节点存在且右子节点比左子节点大
            order = get_right_child_index(IndexK);
        }

        if (Compare(H, order, IndexK)) { // 左右子节点都没有当前节点大
            break;
        }

        Swap(H, IndexK, order);
        IndexK = order;
    }
}
bool IsEmpty(PriorityQueue* H)
{
    return H->size == 0;
}

bool IsFull(PriorityQueue* H)
{
    return H->size == H->capacity;
}

void Destroy(PriorityQueue* H)
{
    free(H->elems);
    free(H);
}
void PrintfQue(PriorityQueue* H)
{
    // 依次出队
    printf("riority_queue: ");
    for (int i = 1; i <= H->size; i++) {
        printf("{ %d, %d} --> ", H->elems[i].apple->srartDay, H->elems[i].apple->num);
    }
    printf("\n");
}
void EnQueue(PriorityQueue* H, EelememtType elem)
{
    if (IsFull(H)) {
        printf("full \n");
        return;
    }

    H->elems[++H->size] = elem;

    Swim(H, H->size);
}
EelememtType DeQueue(PriorityQueue* H)
{
    if (IsEmpty(H)) {
        printf("empty \n");
        return H->elems[0];
    }

    EelememtType max = H->elems[1];
    Swap(H, 1, H->size);

    H->elems[H->size].apple = NULL;
    H->size--;


    Sink(H, 1);
    return max;
}
EelememtType FindTop(PriorityQueue* H)
{
    if (IsEmpty(H) == false) {
        return H->elems[1];
    } 

    printf("enpty \n ");

    return H->elems[0];
}



int eatenApples(int* apples, int applesSize, int* days, int daysSize)
{
    int maxEndDay = -1;
    PriorityQueue* H = Initialize(MAX_APPLE);
    memset(g_allApple, 0, sizeof(g_allApple));
    for (int i = 0; i < applesSize; i++) {
        g_allApple[i].srartDay = i;
        g_allApple[i].entDay = i + days[i] - 1;
        g_allApple[i].num = apples[i];
        maxEndDay = fmax(maxEndDay, g_allApple[i].entDay);
    }

    int res = 0;
    int appIdx = 0;
    for (int i = 0; i <= maxEndDay; i++) {
        while (appIdx < MAX_APPLE && g_allApple[appIdx].srartDay <= i) {
            if (g_allApple[appIdx].num > 0) {
                EelememtType ele = { &g_allApple[appIdx] };
                EnQueue(H, ele);
            }
            appIdx++;
        }

        AppleKind *earAppIdx = FindTop(H).apple;
        while (earAppIdx != NULL && (earAppIdx->entDay < i || earAppIdx->num <= 0)) {
            DeQueue(H);
            earAppIdx = FindTop(H).apple;
        }
        if (earAppIdx == NULL) {
            continue;
        } else {
            earAppIdx->num--;
            res++;
        }
    }

    return res;
}
// ---------------------------解法 结束-------------------------------------------------------





int main(void)
{
    int apples_1[] = { 1,2,3,5,2 };
    int applesSize_1 = sizeof(apples_1) / sizeof(apples_1[0]);
    int days_1[] = { 3,2,1,4,2 };
    int daysSize_1 =  sizeof(days_1) / sizeof(days_1[0]);
    int res_1 =  eatenApples(apples_1, applesSize_1, days_1, daysSize_1);
    assert(res_1 == 7);



    int apples_2[] = { 3,0,0,0,0,2 };
    int applesSize_2 = sizeof(apples_2) / sizeof(apples_2[0]);
    int days_2[] = { 3,0,0,0,0,2 };
    int daysSize_2 =  sizeof(days_2) / sizeof(days_2[0]);
    int res_2 =  eatenApples(apples_2, applesSize_2, days_2, daysSize_2);
    assert(res_2 == 5);


    int apples_3[] = { 2,1,1,4,5 };
    int applesSize_3 = sizeof(apples_3) / sizeof(apples_3[0]);
    int days_3[] = { 10,10,6,4,2 };
    int daysSize_3 =  sizeof(days_3) / sizeof(days_3[0]);
    int res_3 =  eatenApples(apples_3, applesSize_3, days_3, daysSize_3);
    assert(res_3 == 8);

    return 0;
}
