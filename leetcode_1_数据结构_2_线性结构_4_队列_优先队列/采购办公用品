/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : 0408专业级第二题. http://3ms.huawei.com/km/groups/3803117/blogs/details/12105923?l=zh-cn
 * 作    者   :
 * 生成日期   :

 * 动态规划 
      --- 
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"
#include "vos_priorityqueue.h"





/*
某商店正在销售一种原价 price 的办公用品。随着促销季的到来，将优惠售卖一定量的该办公用品，促销信息记录于数组 discount 中，discount[j] = [day, promotionPrice, limit] 表示：在第 day 天，办公用品的促销价为 promotionPrice，但该天最多优惠购买 limit 件。

公司正准备以预算 budget 采购该办公用品 num 件，请问最早在第几天可采购齐办公用品（第几天从 1 开始计数）；若预算无法采购齐办公用品，则返回 -1。

注意：

l  用例保证 discount 按 day 升序（严格递增，即discount[i][0] < discount[i+1][0]），促销价均小于原价；

l  办公用品可在任意一天以原价购买，即从第 1 天就可购买，并且每天都不限数量售卖。

示例 1：

输入：
num = 3
price = 5
discount = [[2,4,2],[3,1,4]]
budget = 14

输出：2

解释：办公用品原价 5，需要买 3 件，预算为 14。
第 1 天无优惠，如果采用原价购买，需要花费 3*5=15，超出预算，无法购齐所有办公用品。
第 2 天购买办公用品 2 件，由于促销，花费 2*4=8；以原价购买办公用品 1 件，花费 1*5=5；总花费为 13，小于预算 14，因此最早第 2 天可购齐所有办公用品。
虽然第 3 天的用品价格更优惠，但是不需要等到第 3 天即可购齐所有办公用品。

示例 2：

输入：
num = 4
price = 10
discount = [[2,5,3],[3,6,2],[4,2,1],[6,1,4],[100,3,1]]
budget = 18

输出：4

解释：
尝试第 1 天完成采购：无优惠，采用原价购买，需要花费 4*10=40，超出预算，无法购齐；
尝试第 2 天完成采购：第 2 天以促销价 5 购买办公用品 3 件，花费 5*3=15，再以原价购买剩余 1 件，花费 1*10=10，共花费 25，超出预算，无法购齐；
尝试第 3 天完成采购：先以最优惠的促销价 5 购买办公用品 3 件，再以次优惠的价格 6 （第 3 天）购买办公用品 1 件，共花费 21，超出预算，无法购齐；
尝试第 4 天完成采购：先以最优惠的促销价 2 购买办公用品 1 件，再以次优惠的价格 5 （第 2 天）购买办公用品 3 件，共花费 17，小于预算，因此最早第 4 天可采购齐所有办公用品。
同理第 5 天也可购齐，但是不是最早的；
...
同理第 100 天也可购齐，但也不是最早的。
因此返回 4 。

示例 3：

输入：
num = 2
price = 4
discount = [[2,3,3]]
budget = 10

输出：1

解释：第 1 天以原价 4 购买办公用品 2 件，花费 2*4=8，小于预算，无需等到第 2 天的优惠，即可购齐所有办公用品，因此返回 1 。

提示：


1 <= price <= 10^5

1 <= num <= 10^4

0 <= discount.length <= 2*10^4

1 <= discount[i][0] <= 10^5

1 <= discount[i][1] <= 10^5

1 <= discount[i][2] <= 10

1 <= budget <= 10^9
*/





// ---------------------------解法 开始-----暴力遍历: -----------------------------------------------------

// ---------------------------解法 结束---------------------------------------------------------------------







// ---------------------------解法 开始-----BFS 递归模板: -----------------------------------------------------

// ---------------------------解法 结束---------------------------------------------------------------------











// ---------------------------解法 开始-----BFS 迭代模板: -----------------------------------------------------

// ---------------------------解法 结束-----------------------------------------------------------------------










// ---------------------------解法 开始-----DFS 递归模板: -----------------------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------











// ---------------------------解法 开始-----DFS 迭代模板: --------------------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------








// ---------------------------解法 开始-----回溯 迭代模板: --------------------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------












// ---------------------------解法 开始-----动态规划 记忆化搜索: ----memTable一定要注意表达 可以表达唯一结果的递归路径,维度不够时，不同结果的的递归路径被误当做相同的路径，维度太多时，剪枝效果不大------------------


// ---------------------------解法 结束----------------------------------------------------------------------







// ---------------------------解法 开始-----动态规划 按顺序递推-----------------------------------------------------

// ---------------------------解法 结束--------------------------------------------------------------------










// ---------------------------解法 开始-----贪心 -----实现优先级队列-----------------------------------------------------
#define MINPQSize (10)
#define MAXPQSize (10001)    // 做题的时候就不用动态申请，直接写死最大值就好了

#define MinDATA (-32767)

typedef struct EelememtType {
    int intVal;
} EelememtType;

typedef struct HeapStruct {
    // int capacity;
    int size;
    EelememtType elems[MAXPQSize];   // 做题的时候就不用动态申请，直接写死最大值就好了
} HeapStruct, PriorityQueue;

void Swap(PriorityQueue* H, int IndexA, int indexB)
{
    EelememtType tmp = H->elems[IndexA];
    H->elems[IndexA] = H->elems[indexB];
    H->elems[indexB] = tmp;
}

int Compare(PriorityQueue* H, int IndexA, int indexB)
{
    return H->elems[IndexA].intVal < H->elems[indexB].intVal;
}

// 注意： 这里我们的计算是基于根节点在数组中的下标为1
// 计算下标为index的节点的父节点下标
int get_parent_index(int index)
{
    return (index) / 2;
}

// 计算下标为index的节点的左孩子下标
int get_left_child_index(int root)
{
    return 2 * root;
}

// 计算下标为index的节点的右孩子下标
int get_right_child_index(int root)
{
    return 2 * root + 1;
}

bool IsEmpty(PriorityQueue* H)
{
    return H->size == 0;
}

int QueueSize(PriorityQueue* H)
{
    return H->size;
}

void PrintfQue(PriorityQueue* H)
{
    // 依次出队
    printf("riority_queue: ");
    for (int i = 1; i <= H->size; i++) {
        printf("{ %d} --> ", H->elems[i].intVal);
    }
    printf("\n");
}

void Swim(PriorityQueue* H, int IndexK)
{
    // indexK >1 判断是否已经到了顶，
    while ((IndexK > 1) && Compare(H, get_parent_index(IndexK), IndexK)) {
        Swap(H, get_parent_index(IndexK), IndexK);
        IndexK = get_parent_index(IndexK);
    }
}

void Sink(PriorityQueue* H, int IndexK)
{
    // 如果已经沉到了堆低，就沉不下去了
    while (get_left_child_index(IndexK) <= H->size) {

        // 先比左右节点,假设左子节点大
        int order = get_left_child_index(IndexK);
        if (get_right_child_index(IndexK) <= H->size && Compare(H, order, get_right_child_index(IndexK))) { // 如果右子节点存在且右子节点比左子节点大
            order = get_right_child_index(IndexK);
        }

        if (Compare(H, order, IndexK)) { // 左右子节点都没有当前节点大
            break;
        }

        Swap(H, IndexK, order);
        IndexK = order;
    }
}


void EnQueue(PriorityQueue* H, EelememtType elem)
{
    H->elems[++H->size] = elem;
    Swim(H, H->size);
}


EelememtType DeQueue(PriorityQueue* H)
{
    if (IsEmpty(H)) {
        printf("empty \n");
        return H->elems[0];
    }

    EelememtType max = H->elems[1];
    Swap(H, 1, H->size);

    H->elems[H->size].intVal = 0;
    H->size--;


    Sink(H, 1);
    return max;
}

int PurchaseItems(int num, int price, int **discount, int discountSize, int budget)
{

    PriorityQueue PQ = { 0 };

    int moneyUsed = 0;
    while (QueueSize(&PQ) < num) {
        EelememtType ele = { price };
        EnQueue(&PQ, ele);
        moneyUsed += price;
    }

    if (moneyUsed <= budget) {
        return 1;
    }

    for (int i  = 0; i < discountSize; i++) {
        int day = discount[i][0];
        int promotionPrice = discount[i][1];
        int limit = discount[i][2];

        for (int j = 0; j < limit; j++) {
            EelememtType MaxMoneyPer = DeQueue(&PQ);

            EelememtType ele = { promotionPrice };
            EnQueue(&PQ, ele);
            moneyUsed = moneyUsed - MaxMoneyPer.intVal + promotionPrice;

            if (moneyUsed <= budget) {
                return day;
            }
        }
    }


    return -1;
}

// ---------------------------解法 结束-----------------------------------------------------------------------












// ---------------------------解法 开始-----贪心 -------使用优先级队列库---------------------------------------------------
// int PurchaseItems(int num, int price, int **discount, int discountSize, int budget)
// {
//     VosPriQue *PQ = VOS_PriQueCreate(VOS_IntCmpFunc, NULL);

//     int moneyUsed = 0;
//     while (VOS_PriQueSize(PQ) < num) {
//         VOS_PriQuePush(PQ, price);
//         moneyUsed += price;
//     }
    
//     if (moneyUsed <= budget) {
//         return 1;
//     }

//     for (int i  = 0; i < discountSize; i++) {
//         int day = discount[i][0];
//         int promotionPrice = discount[i][1];
//         int limit = discount[i][2];

//         for (int j = 0; j < limit; j++) {
//             int MaxMoneyPer = VOS_PriQueTop(PQ);
//             VOS_PriQuePop(PQ);

//             VOS_PriQuePush(PQ, promotionPrice);
//             moneyUsed = moneyUsed - MaxMoneyPer + promotionPrice;

//             if (moneyUsed <= budget) {
//                 return day;
//             }
//         }
//     }


//     return -1;
// }

// ---------------------------解法 结束-----------------------------------------------------------------------


#define MAX_LEN 201

typedef struct Matrix {
    int matrixSize;
    int matrixColSize[MAX_LEN];
    int matrix[MAX_LEN][MAX_LEN];
    int* matrixPoin[MAX_LEN];
} Matrix;





int main(int argc, const char *argv[])
{
    int num_1 = 3;
    int price_1 = 5;
    int budget_1 = 14;
    Matrix matrix_1 = {
        2,
        { 3, 3 },
        {
            { 2,4,2 },
            { 3,1,4 }
        }
    };
    for (int i = 0; i < matrix_1.matrixSize; i++) {
        matrix_1.matrixPoin[i] = &matrix_1.matrix[i][0];
    }
    int res_1 = PurchaseItems(num_1, price_1, matrix_1.matrixPoin, matrix_1.matrixSize, budget_1);
    assert(res_1 == 2);


    int num_2 = 4;
    int price_2 = 10;
    int budget_2 = 18;
    Matrix matrix_2 = {
        5,
        { 3, 3, 3, 3, 3, 3 },
        {
            { 2,5,3 },
            { 3,6,2 },
            { 4,2,1 },
            { 4,2,1 },
            { 100,3,1 },

        }
    };
    for (int i = 0; i < matrix_2.matrixSize; i++) {
        matrix_2.matrixPoin[i] = &matrix_2.matrix[i][0];
    }
    int res_2 = PurchaseItems(num_2, price_2, matrix_2.matrixPoin, matrix_2.matrixSize, budget_2);
    assert(res_2 == 4);


    int num_3 = 2;
    int price_3 = 4;
    int budget_3 = 10;
    Matrix matrix_3 = {
        1,
        { 3, },
        {
            { 2,3,3 },
        }
    };
    for (int i = 0; i < matrix_3.matrixSize; i++) {
        matrix_3.matrixPoin[i] = &matrix_3.matrix[i][0];
    }
    int res_3 = PurchaseItems(num_3, price_3, matrix_3.matrixPoin, matrix_3.matrixSize, budget_3);
    assert(res_3 == 1);



    return 0;
}
