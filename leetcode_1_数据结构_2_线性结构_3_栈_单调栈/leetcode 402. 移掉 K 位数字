/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : leetcode 402. 移掉 K 位数字. https://leetcode-cn.com/problems/remove-k-digits/
 * 作    者   :
 * 生成日期   :

 * 
      --- 
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"
#include "vos_priorityqueue.h"





/*
402. 移掉 K 位数字
给你一个以字符串表示的非负整数 num 和一个整数 k ，移除这个数中的 k 位数字，使得剩下的数字最小。请你以字符串形式返回这个最小的数字。

 
示例 1 ：

输入：num = "1432219", k = 3
输出："1219"
解释：移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219 。
示例 2 ：

输入：num = "10200", k = 1
输出："200"
解释：移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。
示例 3 ：

输入：num = "10", k = 2
输出："0"
解释：从原数字移除所有的数字，剩余为空就是 0 。
 

提示：

1 <= k <= num.length <= 105
num 仅由若干位数字（0 - 9）组成
除了 0 本身之外，num 不含任何前导零
*/





// ---------------------------解法 开始-----暴力遍历: -----------------------------------------------------

// ---------------------------解法 结束---------------------------------------------------------------------







// ---------------------------解法 开始-----BFS 递归模板: -----------------------------------------------------

// ---------------------------解法 结束---------------------------------------------------------------------











// ---------------------------解法 开始-----BFS 迭代模板: -----------------------------------------------------

// ---------------------------解法 结束-----------------------------------------------------------------------










// ---------------------------解法 开始-----DFS 递归模板: -----------------------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------











// ---------------------------解法 开始-----DFS 迭代模板: --------------------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------








// ---------------------------解法 开始-----回溯 迭代模板: --------------------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------












// ---------------------------解法 开始-----动态规划 记忆化搜索: ---------------------


// ---------------------------解法 结束----------------------------------------------------------------------







// ---------------------------解法 开始-----动态规划 按顺序递推-----------------------------------------------------

// ---------------------------解法 结束--------------------------------------------------------------------










// ---------------------------解法 开始-----贪心 --------------------------------------------------------

// ---------------------------解法 结束------------------------------------------------------------------------------

















// ---------------------------解法 开始-----------单调栈------------------------------------------------
#define MAX_STACK_LEN (100001)

typedef struct Elem {
    int val;
    int position;
    char charter;
} Elem;

typedef struct Stack {
    int top;
    Elem elems[MAX_STACK_LEN];
    int size;
    int capacity;
} Stack;

Stack *StackInit(int capacity)
{
    Stack *stack = (Stack *)malloc(sizeof(Stack));
    memset(stack, 0, sizeof(Stack));
    stack->capacity = (capacity == 0) ? MAX_STACK_LEN: capacity;
    stack->size = 0;
    stack->top = -1;
    return stack;
}

void StackDestory(Stack* stack)
{
    free(stack);
}

bool StackIsEmpty(Stack* stack)
{
    return stack->size == 0;
}


bool StackIsFull(Stack* stack)
{
    return stack->size == stack->capacity;
}

int StackSize(Stack* stack)
{
    return stack->size;
}

void StackPrint(Stack* stack)
{
    for (int i = 0; i < stack->size; i++) {
        printf("{%c %d %d }-->", stack->elems[i].charter, stack->elems[i].val, stack->elems[i].position);
    }
    printf("\n");
}

int Compare(Elem A, Elem B)
{
    return (long long)A.val - (long long)B.val;   // 如果B是负数，可能超过int范围
}

void StackPush(Stack* stack, Elem newElem)
{
    if (stack->size >= stack->capacity) {
        printf("stack full error \n");
        return;
    }

    stack->elems[++stack->top] = newElem;
    stack->size++;
}

Elem StackPeek(Stack* stack)
{
    if (stack->size == 0) {
        printf("stack empty error \n");
        Elem ZeroElem = { 0 };
        return ZeroElem;
    }

    return stack->elems[stack->top];
}


void StackPop(Stack* stack)
{
    if (stack->size == 0) {
        printf("stack empty error \n");
        return;
    }

    Elem ZeroElem = { 0 };
    stack->elems[stack->top--] = ZeroElem;
    stack->size--;
}


// bool OrderStackPushCheckIsEmpty(Stack* stack, Elem newElem)
// {
//     // 将所有比当前元素小的元素出栈
//     while ((!StackIsEmpty(stack)) && (Compare(newElem, StackPeek(stack)) >= 0)) {
//         StackPop(stack);
//     }

//     return StackIsEmpty(stack) ? true: false;
// }



#define MAX_RES_LEN MAX_STACK_LEN


int GetCharIndex(char c)
{
    return c - 'a';
}







char * removeKdigits(char * num, int k)
{
    int len =  strlen(num);

    Stack *stack = StackInit(0);
    for (int i = 0; i < len; i++) {
        int index = GetCharIndex(num[i]);
        Elem newElem = { index, i, num[i] };
        // 将所有比当前元素小的元素出栈
        while ((!StackIsEmpty(stack)) && (Compare(newElem, StackPeek(stack)) < 0) && k > 0) { 
            StackPop(stack);
            k--;
        }

        StackPush(stack, newElem);
       
        StackPrint(stack);
    }


    char *res = (char *)malloc(sizeof(char) * MAX_RES_LEN);
    memset(res, 0, sizeof(char) * MAX_RES_LEN);
    int resLen = 0;
    bool begin = 0;
    for (int i = 0; i < StackSize(stack) - k; i++) {
        if ((begin == 0) && (stack->elems[i].charter != '0')) {
            begin = 1;
        }

        if (begin == 1) {
            res[resLen++] = stack->elems[i].charter;
        }
    }

    if (resLen == 0) {
        res[0] = '0';
    }

    StackDestory(stack);
    return res;
}

// ---------------------------解法 结束-----------------------------------------------------------------------





// ---------------------------解法 开始-----------单调队列------------------------------------------------

// ---------------------------解法 结束-----------------------------------------------------------------------




// ---------------------------解法 开始-----------优先队列------------------------------------------------

// ---------------------------解法 结束-----------------------------------------------------------------------


int main() {

    char string_1[] = "1432219";
    int k_1 = 3;
    char *res_1 = removeKdigits(string_1, k_1);          // "1219"
    printf("%s \n", res_1);  



    char string_2[] = "10200";
    int k_2 = 1;
    char *res_2 = removeKdigits(string_2, k_2);          // "200"
    printf("%s \n", res_2);



    char string_3[] = "10";
    int k_3 = 3;
    char *res_3 = removeKdigits(string_3, k_3);          // "0"
    printf("%s \n", res_3);


    char string_4[] = "0000123";
    int k_4 = 3;
    char *res_4 = removeKdigits(string_4, k_4);          // "0"
    printf("%s \n", res_4);



    return 0;
}

