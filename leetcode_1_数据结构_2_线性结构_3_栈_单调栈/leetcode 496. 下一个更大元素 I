/******************************************************************************
 * 版权所有 (c)
 * 功能描述   : leetcode 496. 下一个更大元素 I. https://leetcode-cn.com/problems/next-greater-element-i/
 * 作    者   :
 * 生成日期   :

 * 
      --- 
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <uthash.h>
#include <math.h>
#include <assert.h>
// 如需使用华为安全函数，请加上 #include "securec.h"
// #include "securec.h"
#include "vos_priorityqueue.h"





/*
480. 滑动窗口中位数
中位数是有序序列最中间的那个数。如果序列的长度是偶数，则没有最中间的数；此时中位数是最中间的两个数的平均数。

例如：

[2,3,4]，中位数是 3
[2,3]，中位数是 (2 + 3) / 2 = 2.5
给你一个数组 nums，有一个长度为 k 的窗口从最左端滑动到最右端。窗口中有 k 个数，每次窗口向右移动 1 位。你的任务是找出每次窗口移动后得到的新窗口中元素的中位数，并输出由它们组成的数组。

 

示例：

给出 nums = [1,3,-1,-3,5,3,6,7]，以及 k = 3。

窗口位置                      中位数
---------------               -----
[1  3  -1] -3  5  3  6  7       1
 1 [3  -1  -3] 5  3  6  7      -1
 1  3 [-1  -3  5] 3  6  7      -1
 1  3  -1 [-3  5  3] 6  7       3
 1  3  -1  -3 [5  3  6] 7       5
 1  3  -1  -3  5 [3  6  7]      6
 因此，返回该滑动窗口的中位数数组 [1,-1,-1,3,5,6]。

 

提示：

你可以假设 k 始终有效，即：k 始终小于等于输入的非空数组的元素个数。
与真实值误差在 10 ^ -5 以内的答案将被视作正确答案。
*/





// ---------------------------解法 开始-----暴力遍历: -----------------------------------------------------

// ---------------------------解法 结束---------------------------------------------------------------------







// ---------------------------解法 开始-----BFS 递归模板: -----------------------------------------------------

// ---------------------------解法 结束---------------------------------------------------------------------











// ---------------------------解法 开始-----BFS 迭代模板: -----------------------------------------------------

// ---------------------------解法 结束-----------------------------------------------------------------------










// ---------------------------解法 开始-----DFS 递归模板: -----------------------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------











// ---------------------------解法 开始-----DFS 迭代模板: --------------------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------








// ---------------------------解法 开始-----回溯 迭代模板: --------------------------------------------------

// ---------------------------解法 结束----------------------------------------------------------------------












// ---------------------------解法 开始-----动态规划 记忆化搜索: ---------------------


// ---------------------------解法 结束----------------------------------------------------------------------







// ---------------------------解法 开始-----动态规划 按顺序递推-----------------------------------------------------

// ---------------------------解法 结束--------------------------------------------------------------------










// ---------------------------解法 开始-----贪心 --------------------------------------------------------

// ---------------------------解法 结束------------------------------------------------------------------------------

















// ---------------------------解法 开始-----------单调栈------------------------------------------------
#define MAX_STACK_LEN (1000)

typedef struct Elem {
    int val;
    int position;
} Elem;

typedef struct Stack {
    int top;
    Elem elems[MAX_STACK_LEN];
    int size;
    int capacity;
} Stack;

Stack *StackInit(int capacity)
{
    Stack *stack = (Stack *)malloc(sizeof(Stack));
    memset(stack, 0, sizeof(Stack));
    stack->capacity = (capacity == 0) ? MAX_STACK_LEN: capacity;
    stack->size = 0;
    stack->top = -1;
    return stack;
}

void StackDestory(Stack* stack)
{
    free(stack);
}

bool StackIsEmpty(Stack* stack)
{
    return stack->size == 0;
}


bool StackIsFull(Stack* stack)
{
    return stack->size == stack->capacity;
}

int StackSize(Stack* stack)
{
    return stack->size;
}

void StackPush(Stack* stack, Elem newElem)
{
    if (stack->size >= stack->capacity) {
        printf("stack full error \n");
        return;
    }

    stack->elems[++stack->top] = newElem;
    stack->size++;
}


Elem StackPeek(Stack* stack)
{
    if (stack->size == 0) {
        printf("stack empty error \n");
        Elem ZeroElem = { 0 };
        return ZeroElem;
    }

    return stack->elems[stack->top];
}


void StackPop(Stack* stack)
{
    if (stack->size == 0) {
        printf("stack empty error \n");
        return;
    }

    Elem ZeroElem = { 0 };
    stack->elems[stack->top--] = ZeroElem;
    stack->size--;
}






#define MAX_MAP_LEN 10000
typedef struct HashMap {
    int key;
    int value;
} HashMap;
HashMap g_map[MAX_MAP_LEN];


int* nextGreaterElement(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize)
{
    // if ((nums2 == NULL) && (nums2Size == 0)) {return -1; }
    int *res_2 = (int *)malloc(sizeof(int) * nums2Size); 
    memset(res_2, 0, sizeof(int) * nums2Size);

    memset(g_map, 0, sizeof(g_map));

    Stack *stack = StackInit(0);
    for (int i = nums2Size - 1; i >= 0; i--) {
        // 将所有比当前元素小的元素出栈
        while ((!StackIsEmpty(stack)) && (nums2[i] > StackPeek(stack).val)) {
            StackPop(stack);
        }

        // 如果栈已经空了
        res_2[i] = StackIsEmpty(stack) ? -1: StackPeek(stack).val;

        // 用于数组1进行映射
        g_map[nums2[i]].key = nums2[i];
        g_map[nums2[i]].value = res_2[i];


        Elem newElem = { nums2[i], i + 1 };
        StackPush(stack, newElem);
    }

    
    int *result = (int *)malloc(sizeof(int) * nums1Size); 
    memset(result, 0, sizeof(int) * nums1Size);
    *returnSize = nums1Size;

    for (int i = 0; i < nums1Size; i++) {
        result[i] = g_map[nums1[i]].value;
    }

    free(res_2);
    return result;
}
// ---------------------------解法 结束-----------------------------------------------------------------------





// ---------------------------解法 开始-----------单调队列------------------------------------------------

// ---------------------------解法 结束-----------------------------------------------------------------------




// ---------------------------解法 开始-----------优先队列------------------------------------------------

// ---------------------------解法 结束-----------------------------------------------------------------------


int main() {
    int nums1_1[] = {4,1,2};
    int nums2_1[] = {1,3,4,2};
    int num1Size_1 = sizeof(nums1_1) / sizeof(nums1_1[0]);
    int num2Size_1 = sizeof(nums2_1) / sizeof(nums2_1[0]);
    int returnSize_1 = -1;
    int* result_1 = nextGreaterElement(nums1_1, num1Size_1, nums2_1, num2Size_1, &returnSize_1);
    for (int i = 0; i < returnSize_1; i++) { printf("%d    ", result_1[i]); } printf("\n");

    int nums1_2[] = {1,3,5,2,4};
    int nums2_2[] = {6,5,4,3,2,1,7};
    int num1Size_2 = sizeof(nums1_2) / sizeof(nums1_2[0]);
    int num2Size_2 = sizeof(nums2_2) / sizeof(nums2_2[0]);
    int returnSize_2 = -1;
    int* result_2 = nextGreaterElement(nums1_2, num1Size_2, nums2_2, num2Size_2, &returnSize_2);
    for (int i = 0; i < num1Size_2; i++) { printf("%d    ", result_2[i]); } printf("\n");


    return 0;
}

